//-------------------------------------------------------------------------------------------------
// *** f8c generated file: DO NOT EDIT! Created: 2023-02-26 17:29:18 ***
//-------------------------------------------------------------------------------------------------
/*

Fix8 is released under the GNU LESSER GENERAL PUBLIC LICENSE Version 3.

Fix8 Open Source FIX Engine.
Copyright (C) 2010-23 David L. Dight <fix@fix8.org>

Fix8 is free software: you can  redistribute it and / or modify  it under the  terms of the
GNU Lesser General  Public License as  published  by the Free  Software Foundation,  either
version 3 of the License, or (at your option) any later version.

Fix8 is distributed in the hope  that it will be useful, but WITHOUT ANY WARRANTY;  without
even the  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

You should  have received a copy of the GNU Lesser General Public  License along with Fix8.
If not, see <http://www.gnu.org/licenses/>.

*******************************************************************************************
*                Special note for Fix8 compiler generated source code                     *
*                                                                                         *
* Binary works  that are the results of compilation of code that is generated by the Fix8 *
* compiler  can be released  without releasing your  source code as  long as your  binary *
* links dynamically  against an  unmodified version of the Fix8 library.  You are however *
* required to leave the copyright text in the generated code.                             *
*                                                                                         *
*******************************************************************************************

BECAUSE THE PROGRAM IS  LICENSED FREE OF  CHARGE, THERE IS NO  WARRANTY FOR THE PROGRAM, TO
THE EXTENT  PERMITTED  BY  APPLICABLE  LAW.  EXCEPT WHEN  OTHERWISE  STATED IN  WRITING THE
COPYRIGHT HOLDERS AND/OR OTHER PARTIES  PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY
KIND,  EITHER EXPRESSED   OR   IMPLIED,  INCLUDING,  BUT   NOT  LIMITED   TO,  THE  IMPLIED
WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

IN NO EVENT UNLESS REQUIRED  BY APPLICABLE LAW  OR AGREED TO IN  WRITING WILL ANY COPYRIGHT
HOLDER, OR  ANY OTHER PARTY  WHO MAY MODIFY  AND/OR REDISTRIBUTE  THE PROGRAM AS  PERMITTED
ABOVE,  BE  LIABLE  TO  YOU  FOR  DAMAGES,  INCLUDING  ANY  GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH
HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

*/

//-------------------------------------------------------------------------------------------------
#include <fix8/f8config.h>
#if defined FIX8_MAGIC_NUM && FIX8_MAGIC_NUM > 16793601L
#error FIX8_SERUM_Order_types.hpp version 1.4.1 is out of date. Please regenerate with f8c.
#endif
//-------------------------------------------------------------------------------------------------
// FIX8_SERUM_Order_types.hpp
//-------------------------------------------------------------------------------------------------
#ifndef FIX8_464958385F534552554D5F4F726465725F74797065732E687070_
#define FIX8_464958385F534552554D5F4F726465725F74797065732E687070_

namespace FIX8 {
namespace SERUM_Order {

//-------------------------------------------------------------------------------------------------
using Account = Field<f8String, 1>;
//-------------------------------------------------------------------------------------------------
using AdvId = Field<f8String, 2>;
//-------------------------------------------------------------------------------------------------
using AdvRefID = Field<f8String, 3>;
//-------------------------------------------------------------------------------------------------
using AdvSide = Field<char, 4>;
const char AdvSide_BUY('B');
const char AdvSide_SELL('S');
const char AdvSide_TRADE('T');
const char AdvSide_CROSS('X');
const size_t AdvSide_realm_els(4);
//-------------------------------------------------------------------------------------------------
using AdvTransType = Field<f8String, 5>;
const f8String AdvTransType_CANCEL("C");
const f8String AdvTransType_NEW("N");
const f8String AdvTransType_REPLACE("R");
const size_t AdvTransType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using AvgPx = Field<price, 6>;
//-------------------------------------------------------------------------------------------------
using BeginSeqNo = Field<SeqNum, 7>;
//-------------------------------------------------------------------------------------------------
using BeginString = Field<f8String, 8>;
//-------------------------------------------------------------------------------------------------
using BodyLength = Field<Length, 9>;
//-------------------------------------------------------------------------------------------------
using CheckSum = Field<f8String, 10>;
//-------------------------------------------------------------------------------------------------
using ClOrdID = Field<f8String, 11>;
//-------------------------------------------------------------------------------------------------
using Commission = Field<Amt, 12>;
//-------------------------------------------------------------------------------------------------
using CommType = Field<char, 13>;
const char CommType_PER_UNIT('1');
const char CommType_PERCENTAGE('2');
const char CommType_ABSOLUTE('3');
const char CommType_4('4');
const char CommType_5('5');
const char CommType_POINTS_PER_BOND_OR_CONTRACT_SUPPLY_CONTRACTMULTIPLIER('6');
const size_t CommType_realm_els(6);
//-------------------------------------------------------------------------------------------------
using CumQty = Field<Qty, 14>;
//-------------------------------------------------------------------------------------------------
using Currency = Field<currency, 15>;
//-------------------------------------------------------------------------------------------------
using EndSeqNo = Field<SeqNum, 16>;
//-------------------------------------------------------------------------------------------------
using ExecID = Field<f8String, 17>;
//-------------------------------------------------------------------------------------------------
using ExecInst = Field<MultipleStringValue, 18>;
const f8String ExecInst_STAY_ON_OFFERSIDE("0");
const f8String ExecInst_NOT_HELD("1");
const f8String ExecInst_WORK("2");
const f8String ExecInst_GO_ALONG("3");
const f8String ExecInst_OVER_THE_DAY("4");
const f8String ExecInst_HELD("5");
const f8String ExecInst_PARTICIPATE_DONT_INITIATE("6");
const f8String ExecInst_STRICT_SCALE("7");
const f8String ExecInst_TRY_TO_SCALE("8");
const f8String ExecInst_STAY_ON_BIDSIDE("9");
const f8String ExecInst_NO_CROSS("A");
const f8String ExecInst_OK_TO_CROSS("B");
const f8String ExecInst_CALL_FIRST("C");
const f8String ExecInst_PERCENT_OF_VOLUME("D");
const f8String ExecInst_DO_NOT_INCREASE("E");
const f8String ExecInst_DO_NOT_REDUCE("F");
const f8String ExecInst_ALL_OR_NONE("G");
const f8String ExecInst_REINSTATE_ON_SYSTEM_FAILURE("H");
const f8String ExecInst_INSTITUTIONS_ONLY("I");
const f8String ExecInst_REINSTATE_ON_TRADING_HALT("J");
const f8String ExecInst_CANCEL_ON_TRADING_HALT("K");
const f8String ExecInst_LAST_PEG("L");
const f8String ExecInst_MID_PRICE_PEG("M");
const f8String ExecInst_NON_NEGOTIABLE("N");
const f8String ExecInst_OPENING_PEG("O");
const f8String ExecInst_MARKET_PEG("P");
const f8String ExecInst_CANCEL_ON_SYSTEM_FAILURE("Q");
const f8String ExecInst_PRIMARY_PEG("R");
const f8String ExecInst_SUSPEND("S");
const f8String ExecInst_CUSTOMER_DISPLAY_INSTRUCTION("U");
const f8String ExecInst_NETTING("V");
const f8String ExecInst_PEG_TO_VWAP("W");
const f8String ExecInst_TRADE_ALONG("X");
const f8String ExecInst_TRY_TO_STOP("Y");
const f8String ExecInst_CANCEL_IF_NOT_BEST("Z");
const f8String ExecInst_TRAILING_STOP_PEG("a");
const f8String ExecInst_STRICT_LIMIT("b");
const f8String ExecInst_IGNORE_PRICE_VALIDITY_CHECKS("c");
const f8String ExecInst_PEG_TO_LIMIT_PRICE("d");
const f8String ExecInst_WORK_TO_TARGET_STRATEGY("e");
const size_t ExecInst_realm_els(40);
//-------------------------------------------------------------------------------------------------
using ExecRefID = Field<f8String, 19>;
//-------------------------------------------------------------------------------------------------
using HandlInst = Field<char, 21>;
const char HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION('1');
const char HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC_BROKER_INTERVENTION_OK('2');
const char HandlInst_MANUAL_ORDER_BEST_EXECUTION('3');
const size_t HandlInst_realm_els(3);
//-------------------------------------------------------------------------------------------------
using SecurityIDSource = Field<f8String, 22>;
const f8String SecurityIDSource_CUSIP("1");
const f8String SecurityIDSource_SEDOL("2");
const f8String SecurityIDSource_QUIK("3");
const f8String SecurityIDSource_ISIN_NUMBER("4");
const f8String SecurityIDSource_RIC_CODE("5");
const f8String SecurityIDSource_ISO_CURRENCY_CODE("6");
const f8String SecurityIDSource_ISO_COUNTRY_CODE("7");
const f8String SecurityIDSource_EXCHANGE_SYMBOL("8");
const f8String SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION("9");
const f8String SecurityIDSource_BLOOMBERG_SYMBOL("A");
const f8String SecurityIDSource_WERTPAPIER("B");
const f8String SecurityIDSource_DUTCH("C");
const f8String SecurityIDSource_VALOREN("D");
const f8String SecurityIDSource_SICOVAM("E");
const f8String SecurityIDSource_BELGIAN("F");
const f8String SecurityIDSource_COMMON("G");
const f8String SecurityIDSource_CLEARING_HOUSE("H");
const f8String SecurityIDSource_ISDA_FPML_PRODUCT_SPECIFICATION("I");
const f8String SecurityIDSource_OPTIONS_PRICE_REPORTING_AUTHORITY("J");
const size_t SecurityIDSource_realm_els(19);
//-------------------------------------------------------------------------------------------------
using IOIID = Field<f8String, 23>;
//-------------------------------------------------------------------------------------------------
using IOIQltyInd = Field<char, 25>;
const char IOIQltyInd_HIGH('H');
const char IOIQltyInd_LOW('L');
const char IOIQltyInd_MEDIUM('M');
const size_t IOIQltyInd_realm_els(3);
//-------------------------------------------------------------------------------------------------
using IOIRefID = Field<f8String, 26>;
//-------------------------------------------------------------------------------------------------
using IOIQty = Field<f8String, 27>;
const f8String IOIQty_LARGE("L");
const f8String IOIQty_MEDIUM("M");
const f8String IOIQty_SMALL("S");
const size_t IOIQty_realm_els(3);
//-------------------------------------------------------------------------------------------------
using IOITransType = Field<char, 28>;
const char IOITransType_CANCEL('C');
const char IOITransType_NEW('N');
const char IOITransType_REPLACE('R');
const size_t IOITransType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using LastCapacity = Field<char, 29>;
const char LastCapacity_AGENT('1');
const char LastCapacity_CROSS_AS_AGENT('2');
const char LastCapacity_CROSS_AS_PRINCIPAL('3');
const char LastCapacity_PRINCIPAL('4');
const size_t LastCapacity_realm_els(4);
//-------------------------------------------------------------------------------------------------
using LastMkt = Field<Exchange, 30>;
//-------------------------------------------------------------------------------------------------
using LastPx = Field<price, 31>;
//-------------------------------------------------------------------------------------------------
using LastQty = Field<Qty, 32>;
//-------------------------------------------------------------------------------------------------
using NoLinesOfText = Field<NumInGroup, 33>;
//-------------------------------------------------------------------------------------------------
using MsgSeqNum = Field<SeqNum, 34>;
//-------------------------------------------------------------------------------------------------
using MsgType = Field<f8String, 35>;
const f8String MsgType_HEARTBEAT("0");
const f8String MsgType_TEST_REQUEST("1");
const f8String MsgType_RESEND_REQUEST("2");
const f8String MsgType_REJECT("3");
const f8String MsgType_SEQUENCE_RESET("4");
const f8String MsgType_LOGOUT("5");
const f8String MsgType_INDICATION_OF_INTEREST("6");
const f8String MsgType_ADVERTISEMENT("7");
const f8String MsgType_EXECUTION_REPORT("8");
const f8String MsgType_ORDER_CANCEL_REJECT("9");
const f8String MsgType_LOGON("A");
const f8String MsgType_DERIVATIVE_SECURITY_LIST("AA");
const f8String MsgType_NEW_ORDER_AB("AB");
const f8String MsgType_MULTILEG_ORDER_CANCEL_REPLACE("AC");
const f8String MsgType_TRADE_CAPTURE_REPORT_REQUEST("AD");
const f8String MsgType_TRADE_CAPTURE_REPORT("AE");
const f8String MsgType_ORDER_MASS_STATUS_REQUEST("AF");
const f8String MsgType_QUOTE_REQUEST_REJECT("AG");
const f8String MsgType_RFQ_REQUEST("AH");
const f8String MsgType_QUOTE_STATUS_REPORT("AI");
const f8String MsgType_QUOTE_RESPONSE("AJ");
const f8String MsgType_CONFIRMATION("AK");
const f8String MsgType_POSITION_MAINTENANCE_REQUEST("AL");
const f8String MsgType_POSITION_MAINTENANCE_REPORT("AM");
const f8String MsgType_REQUEST_FOR_POSITIONS("AN");
const f8String MsgType_REQUEST_FOR_POSITIONS_ACK("AO");
const f8String MsgType_POSITION_REPORT("AP");
const f8String MsgType_TRADE_CAPTURE_REPORT_REQUEST_ACK("AQ");
const f8String MsgType_TRADE_CAPTURE_REPORT_ACK("AR");
const f8String MsgType_ALLOCATION_REPORT("AS");
const f8String MsgType_ALLOCATION_REPORT_ACK("AT");
const f8String MsgType_CONFIRMATION_ACK("AU");
const f8String MsgType_SETTLEMENT_INSTRUCTION_REQUEST("AV");
const f8String MsgType_ASSIGNMENT_REPORT("AW");
const f8String MsgType_COLLATERAL_REQUEST("AX");
const f8String MsgType_COLLATERAL_ASSIGNMENT("AY");
const f8String MsgType_COLLATERAL_RESPONSE("AZ");
const f8String MsgType_NEWS("B");
const f8String MsgType_COLLATERAL_REPORT("BA");
const f8String MsgType_COLLATERAL_INQUIRY("BB");
const f8String MsgType_NETWORK_BC("BC");
const f8String MsgType_NETWORK_BD("BD");
const f8String MsgType_USER_REQUEST("BE");
const f8String MsgType_USER_RESPONSE("BF");
const f8String MsgType_COLLATERAL_INQUIRY_ACK("BG");
const f8String MsgType_CONFIRMATION_REQUEST("BH");
const f8String MsgType_EMAIL("C");
const f8String MsgType_ORDER_SINGLE("D");
const f8String MsgType_ORDER_LIST("E");
const f8String MsgType_ORDER_CANCEL_REQUEST("F");
const f8String MsgType_ORDER_CANCEL_REPLACE_REQUEST("G");
const f8String MsgType_ORDER_STATUS_REQUEST("H");
const f8String MsgType_ALLOCATION_INSTRUCTION("J");
const f8String MsgType_LIST_CANCEL_REQUEST("K");
const f8String MsgType_LIST_EXECUTE("L");
const f8String MsgType_LIST_STATUS_REQUEST("M");
const f8String MsgType_LIST_STATUS("N");
const f8String MsgType_ALLOCATION_INSTRUCTION_ACK("P");
const f8String MsgType_DONT_KNOW_TRADE("Q");
const f8String MsgType_QUOTE_REQUEST("R");
const f8String MsgType_QUOTE("S");
const f8String MsgType_SETTLEMENT_INSTRUCTIONS("T");
const f8String MsgType_MARKET_DATA_REQUEST("V");
const f8String MsgType_MARKET_DATA_SNAPSHOT_FULL_REFRESH("W");
const f8String MsgType_MARKET_DATA_INCREMENTAL_REFRESH("X");
const f8String MsgType_MARKET_DATA_REQUEST_REJECT("Y");
const f8String MsgType_QUOTE_CANCEL("Z");
const f8String MsgType_QUOTE_STATUS_REQUEST("a");
const f8String MsgType_MASS_QUOTE_ACKNOWLEDGEMENT("b");
const f8String MsgType_SECURITY_DEFINITION_REQUEST("c");
const f8String MsgType_SECURITY_DEFINITION("d");
const f8String MsgType_SECURITY_STATUS_REQUEST("e");
const f8String MsgType_SECURITY_STATUS("f");
const f8String MsgType_TRADING_SESSION_STATUS_REQUEST("g");
const f8String MsgType_TRADING_SESSION_STATUS("h");
const f8String MsgType_MASS_QUOTE("i");
const f8String MsgType_BUSINESS_MESSAGE_REJECT("j");
const f8String MsgType_BID_REQUEST("k");
const f8String MsgType_BID_RESPONSE("l");
const f8String MsgType_LIST_STRIKE_PRICE("m");
const f8String MsgType_XML_MESSAGE("n");
const f8String MsgType_REGISTRATION_INSTRUCTIONS("o");
const f8String MsgType_REGISTRATION_INSTRUCTIONS_RESPONSE("p");
const f8String MsgType_ORDER_MASS_CANCEL_REQUEST("q");
const f8String MsgType_ORDER_MASS_CANCEL_REPORT("r");
const f8String MsgType_NEW_ORDER_s("s");
const f8String MsgType_CROSS_ORDER_CANCEL_REPLACE_REQUEST("t");
const f8String MsgType_CROSS_ORDER_CANCEL_REQUEST("u");
const f8String MsgType_SECURITY_TYPE_REQUEST("v");
const f8String MsgType_SECURITY_TYPES("w");
const f8String MsgType_SECURITY_LIST_REQUEST("x");
const f8String MsgType_SECURITY_LIST("y");
const f8String MsgType_DERIVATIVE_SECURITY_LIST_REQUEST("z");
const size_t MsgType_realm_els(93);
//-------------------------------------------------------------------------------------------------
using NewSeqNo = Field<SeqNum, 36>;
//-------------------------------------------------------------------------------------------------
using OrderID = Field<f8String, 37>;
//-------------------------------------------------------------------------------------------------
using OrderQty = Field<Qty, 38>;
//-------------------------------------------------------------------------------------------------
using OrdStatus = Field<char, 39>;
const char OrdStatus_NEW('0');
const char OrdStatus_PARTIALLY_FILLED('1');
const char OrdStatus_FILLED('2');
const char OrdStatus_DONE_FOR_DAY('3');
const char OrdStatus_CANCELED('4');
const char OrdStatus_PENDING_CANCEL('6');
const char OrdStatus_STOPPED('7');
const char OrdStatus_REJECTED('8');
const char OrdStatus_SUSPENDED('9');
const char OrdStatus_PENDING_NEW('A');
const char OrdStatus_CALCULATED('B');
const char OrdStatus_EXPIRED('C');
const char OrdStatus_ACCEPTED_FOR_BIDDING('D');
const char OrdStatus_PENDING_REPLACE('E');
const size_t OrdStatus_realm_els(14);
//-------------------------------------------------------------------------------------------------
using OrdType = Field<char, 40>;
const char OrdType_MARKET('1');
const char OrdType_LIMIT('2');
const char OrdType_STOP('3');
const char OrdType_STOP_LIMIT('4');
const char OrdType_WITH_OR_WITHOUT('6');
const char OrdType_LIMIT_OR_BETTER('7');
const char OrdType_LIMIT_WITH_OR_WITHOUT('8');
const char OrdType_ON_BASIS('9');
const char OrdType_PREVIOUSLY_QUOTED('D');
const char OrdType_PREVIOUSLY_INDICATED('E');
const char OrdType_FOREX('G');
const char OrdType_FUNARI('I');
const char OrdType_MARKET_IF_TOUCHED('J');
const char OrdType_MARKET_WITH_LEFTOVER_AS_LIMIT('K');
const char OrdType_PREVIOUS_FUND_VALUATION_POINT('L');
const char OrdType_NEXT_FUND_VALUATION_POINT('M');
const char OrdType_PEGGED('P');
const size_t OrdType_realm_els(17);
//-------------------------------------------------------------------------------------------------
using OrigClOrdID = Field<f8String, 41>;
//-------------------------------------------------------------------------------------------------
using OrigTime = Field<UTCTimestamp, 42>;
//-------------------------------------------------------------------------------------------------
using PossDupFlag = Field<Boolean, 43>;
const char PossDupFlag_NO('N');
const char PossDupFlag_YES('Y');
const size_t PossDupFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using Price = Field<price, 44>;
//-------------------------------------------------------------------------------------------------
using RefSeqNum = Field<SeqNum, 45>;
//-------------------------------------------------------------------------------------------------
using SecurityID = Field<f8String, 48>;
//-------------------------------------------------------------------------------------------------
using SenderCompID = Field<f8String, 49>;
//-------------------------------------------------------------------------------------------------
using SenderSubID = Field<f8String, 50>;
//-------------------------------------------------------------------------------------------------
using SendingTime = Field<UTCTimestamp, 52>;
//-------------------------------------------------------------------------------------------------
using Quantity = Field<Qty, 53>;
//-------------------------------------------------------------------------------------------------
using Side = Field<char, 54>;
const char Side_BUY('1');
const char Side_SELL('2');
const char Side_BUY_MINUS('3');
const char Side_SELL_PLUS('4');
const char Side_SELL_SHORT('5');
const char Side_SELL_SHORT_EXEMPT('6');
const char Side_UNDISCLOSED('7');
const char Side_CROSS('8');
const char Side_CROSS_SHORT('9');
const char Side_CROSS_SHORT_EXEMPT('A');
const char Side_AS_DEFINED('B');
const char Side_OPPOSITE('C');
const char Side_SUBSCRIBE('D');
const char Side_REDEEM('E');
const char Side_LEND('F');
const char Side_BORROW('G');
const size_t Side_realm_els(16);
//-------------------------------------------------------------------------------------------------
using Symbol = Field<f8String, 55>;
//-------------------------------------------------------------------------------------------------
using TargetCompID = Field<f8String, 56>;
//-------------------------------------------------------------------------------------------------
using TargetSubID = Field<f8String, 57>;
//-------------------------------------------------------------------------------------------------
using Text = Field<f8String, 58>;
//-------------------------------------------------------------------------------------------------
using TimeInForce = Field<char, 59>;
const char TimeInForce_DAY('0');
const char TimeInForce_GOOD_TILL_CANCEL('1');
const char TimeInForce_AT_THE_OPENING('2');
const char TimeInForce_IMMEDIATE_OR_CANCEL('3');
const char TimeInForce_FILL_OR_KILL('4');
const char TimeInForce_GOOD_TILL_CROSSING('5');
const char TimeInForce_GOOD_TILL_DATE('6');
const char TimeInForce_AT_THE_CLOSE('7');
const size_t TimeInForce_realm_els(8);
//-------------------------------------------------------------------------------------------------
using TransactTime = Field<UTCTimestamp, 60>;
//-------------------------------------------------------------------------------------------------
using Urgency = Field<char, 61>;
const char Urgency_NORMAL('0');
const char Urgency_FLASH('1');
const char Urgency_BACKGROUND('2');
const size_t Urgency_realm_els(3);
//-------------------------------------------------------------------------------------------------
using ValidUntilTime = Field<UTCTimestamp, 62>;
//-------------------------------------------------------------------------------------------------
using SettlType = Field<char, 63>;
const char SettlType_REGULAR('0');
const char SettlType_CASH('1');
const char SettlType_NEXT_DAY('2');
const char SettlType_T_PLUS_2('3');
const char SettlType_T_PLUS_3('4');
const char SettlType_T_PLUS_4('5');
const char SettlType_FUTURE('6');
const char SettlType_WHEN_AND_IF_ISSUED('7');
const char SettlType_SELLERS_OPTION('8');
const char SettlType_T_PLUS_5('9');
const size_t SettlType_realm_els(10);
//-------------------------------------------------------------------------------------------------
using SettlDate = Field<LocalMktDate, 64>;
//-------------------------------------------------------------------------------------------------
using SymbolSfx = Field<f8String, 65>;
//-------------------------------------------------------------------------------------------------
using ListID = Field<f8String, 66>;
//-------------------------------------------------------------------------------------------------
using ListSeqNo = Field<int, 67>;
//-------------------------------------------------------------------------------------------------
using TotNoOrders = Field<int, 68>;
//-------------------------------------------------------------------------------------------------
using ListExecInst = Field<f8String, 69>;
//-------------------------------------------------------------------------------------------------
using AllocID = Field<f8String, 70>;
//-------------------------------------------------------------------------------------------------
using AllocTransType = Field<char, 71>;
const char AllocTransType_NEW('0');
const char AllocTransType_REPLACE('1');
const char AllocTransType_CANCEL('2');
const size_t AllocTransType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using RefAllocID = Field<f8String, 72>;
//-------------------------------------------------------------------------------------------------
using NoOrders = Field<NumInGroup, 73>;
//-------------------------------------------------------------------------------------------------
using AvgPxPrecision = Field<int, 74>;
//-------------------------------------------------------------------------------------------------
using TradeDate = Field<LocalMktDate, 75>;
//-------------------------------------------------------------------------------------------------
using PositionEffect = Field<char, 77>;
const char PositionEffect_CLOSE('C');
const char PositionEffect_FIFO('F');
const char PositionEffect_OPEN('O');
const char PositionEffect_ROLLED('R');
const size_t PositionEffect_realm_els(4);
//-------------------------------------------------------------------------------------------------
using NoAllocs = Field<NumInGroup, 78>;
//-------------------------------------------------------------------------------------------------
using AllocAccount = Field<f8String, 79>;
//-------------------------------------------------------------------------------------------------
using AllocQty = Field<Qty, 80>;
//-------------------------------------------------------------------------------------------------
using ProcessCode = Field<char, 81>;
const char ProcessCode_REGULAR('0');
const char ProcessCode_SOFT_DOLLAR('1');
const char ProcessCode_STEP_IN('2');
const char ProcessCode_STEP_OUT('3');
const char ProcessCode_SOFT_DOLLAR_STEP_IN('4');
const char ProcessCode_SOFT_DOLLAR_STEP_OUT('5');
const char ProcessCode_PLAN_SPONSOR('6');
const size_t ProcessCode_realm_els(7);
//-------------------------------------------------------------------------------------------------
using NoRpts = Field<int, 82>;
//-------------------------------------------------------------------------------------------------
using RptSeq = Field<int, 83>;
//-------------------------------------------------------------------------------------------------
using CxlQty = Field<Qty, 84>;
//-------------------------------------------------------------------------------------------------
using NoDlvyInst = Field<NumInGroup, 85>;
//-------------------------------------------------------------------------------------------------
using AllocStatus = Field<int, 87>;
const int AllocStatus_ACCEPTED(0);
const int AllocStatus_BLOCK_LEVEL_REJECT(1);
const int AllocStatus_ACCOUNT_LEVEL_REJECT(2);
const int AllocStatus_RECEIVED(3);
const int AllocStatus_INCOMPLETE(4);
const int AllocStatus_REJECTED_BY_INTERMEDIARY(5);
const size_t AllocStatus_realm_els(6);
//-------------------------------------------------------------------------------------------------
using AllocRejCode = Field<int, 88>;
const int AllocRejCode_UNKNOWN_ACCOUNT(0);
const int AllocRejCode_INCORRECT_QUANTITY(1);
const int AllocRejCode_INCORRECT_AVERAGE_PRICE(2);
const int AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC(3);
const int AllocRejCode_COMMISSION_DIFFERENCE(4);
const int AllocRejCode_UNKNOWN_ORDERID(5);
const int AllocRejCode_UNKNOWN_LISTID(6);
const int AllocRejCode_OTHER(7);
const int AllocRejCode_INCORRECT_ALLOCATED_QUANTITY(8);
const int AllocRejCode_CALCULATION_DIFFERENCE(9);
const int AllocRejCode_UNKNOWN_OR_STALE_EXECID(10);
const int AllocRejCode_MISMATCHED_DATA_VALUE(11);
const int AllocRejCode_UNKNOWN_CLORDID(12);
const int AllocRejCode_WAREHOUSE_REQUEST_REJECTED(13);
const size_t AllocRejCode_realm_els(14);
//-------------------------------------------------------------------------------------------------
using Signature = Field<data, 89>;
//-------------------------------------------------------------------------------------------------
using SecureDataLen = Field<Length, 90>;
//-------------------------------------------------------------------------------------------------
using SecureData = Field<data, 91>;
//-------------------------------------------------------------------------------------------------
using SignatureLength = Field<Length, 93>;
//-------------------------------------------------------------------------------------------------
using EmailType = Field<char, 94>;
const char EmailType_NEW('0');
const char EmailType_REPLY('1');
const char EmailType_ADMIN_REPLY('2');
const size_t EmailType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using RawDataLength = Field<Length, 95>;
//-------------------------------------------------------------------------------------------------
using RawData = Field<data, 96>;
//-------------------------------------------------------------------------------------------------
using PossResend = Field<Boolean, 97>;
const char PossResend_NO('N');
const char PossResend_YES('Y');
const size_t PossResend_realm_els(2);
//-------------------------------------------------------------------------------------------------
using EncryptMethod = Field<int, 98>;
const int EncryptMethod_NONE(0);
const int EncryptMethod_PKCS(1);
const int EncryptMethod_DES(2);
const int EncryptMethod_PKCS_DES(3);
const int EncryptMethod_PGP_DES(4);
const int EncryptMethod_PGP_DES_MD5(5);
const int EncryptMethod_PEM_DES_MD5(6);
const size_t EncryptMethod_realm_els(7);
//-------------------------------------------------------------------------------------------------
using StopPx = Field<price, 99>;
//-------------------------------------------------------------------------------------------------
using ExDestination = Field<Exchange, 100>;
//-------------------------------------------------------------------------------------------------
using CxlRejReason = Field<int, 102>;
const int CxlRejReason_TOO_LATE_TO_CANCEL(0);
const int CxlRejReason_UNKNOWN_ORDER(1);
const int CxlRejReason_BROKER(2);
const int CxlRejReason_ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS(3);
const int CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST(4);
const int CxlRejReason_ORIGORDMODTIME(5);
const int CxlRejReason_DUPLICATE_CLORDID(6);
const int CxlRejReason_OTHER(99);
const size_t CxlRejReason_realm_els(8);
//-------------------------------------------------------------------------------------------------
using OrdRejReason = Field<int, 103>;
const int OrdRejReason_BROKER(0);
const int OrdRejReason_UNKNOWN_SYMBOL(1);
const int OrdRejReason_EXCHANGE_CLOSED(2);
const int OrdRejReason_ORDER_EXCEEDS_LIMIT(3);
const int OrdRejReason_TOO_LATE_TO_ENTER(4);
const int OrdRejReason_UNKNOWN_ORDER(5);
const int OrdRejReason_DUPLICATE_ORDER(6);
const int OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER(7);
const int OrdRejReason_STALE_ORDER(8);
const int OrdRejReason_TRADE_ALONG_REQUIRED(9);
const int OrdRejReason_INVALID_INVESTOR_ID(10);
const int OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC12_SURVEILLENCE_OPTION(11);
const int OrdRejReason_INCORRECT_QUANTITY(13);
const int OrdRejReason_INCORRECT_ALLOCATED_QUANTITY(14);
const int OrdRejReason_UNKNOWN_ACCOUNT(15);
const int OrdRejReason_OTHER(99);
const size_t OrdRejReason_realm_els(16);
//-------------------------------------------------------------------------------------------------
using IOIQualifier = Field<char, 104>;
const char IOIQualifier_ALL_OR_NONE('A');
const char IOIQualifier_MARKET_ON_CLOSE('B');
const char IOIQualifier_AT_THE_CLOSE('C');
const char IOIQualifier_VWAP('D');
const char IOIQualifier_IN_TOUCH_WITH('I');
const char IOIQualifier_LIMIT('L');
const char IOIQualifier_MORE_BEHIND('M');
const char IOIQualifier_AT_THE_OPEN('O');
const char IOIQualifier_TAKING_A_POSITION('P');
const char IOIQualifier_AT_THE_MARKET('Q');
const char IOIQualifier_READY_TO_TRADE('R');
const char IOIQualifier_PORTFOLIO_SHOWN('S');
const char IOIQualifier_THROUGH_THE_DAY('T');
const char IOIQualifier_VERSUS('V');
const char IOIQualifier_INDICATION('W');
const char IOIQualifier_CROSSING_OPPORTUNITY('X');
const char IOIQualifier_AT_THE_MIDPOINT('Y');
const char IOIQualifier_PRE_OPEN('Z');
const size_t IOIQualifier_realm_els(18);
//-------------------------------------------------------------------------------------------------
using Issuer = Field<f8String, 106>;
//-------------------------------------------------------------------------------------------------
using SecurityDesc = Field<f8String, 107>;
//-------------------------------------------------------------------------------------------------
using HeartBtInt = Field<int, 108>;
//-------------------------------------------------------------------------------------------------
using MinQty = Field<Qty, 110>;
//-------------------------------------------------------------------------------------------------
using MaxFloor = Field<Qty, 111>;
//-------------------------------------------------------------------------------------------------
using TestReqID = Field<f8String, 112>;
//-------------------------------------------------------------------------------------------------
using ReportToExch = Field<Boolean, 113>;
const char ReportToExch_NO('N');
const char ReportToExch_YES('Y');
const size_t ReportToExch_realm_els(2);
//-------------------------------------------------------------------------------------------------
using LocateReqd = Field<Boolean, 114>;
const char LocateReqd_NO('N');
const char LocateReqd_YES('Y');
const size_t LocateReqd_realm_els(2);
//-------------------------------------------------------------------------------------------------
using OnBehalfOfCompID = Field<f8String, 115>;
//-------------------------------------------------------------------------------------------------
using OnBehalfOfSubID = Field<f8String, 116>;
//-------------------------------------------------------------------------------------------------
using QuoteID = Field<f8String, 117>;
//-------------------------------------------------------------------------------------------------
using NetMoney = Field<Amt, 118>;
//-------------------------------------------------------------------------------------------------
using SettlCurrAmt = Field<Amt, 119>;
//-------------------------------------------------------------------------------------------------
using SettlCurrency = Field<currency, 120>;
//-------------------------------------------------------------------------------------------------
using ForexReq = Field<Boolean, 121>;
const char ForexReq_NO('N');
const char ForexReq_YES('Y');
const size_t ForexReq_realm_els(2);
//-------------------------------------------------------------------------------------------------
using OrigSendingTime = Field<UTCTimestamp, 122>;
//-------------------------------------------------------------------------------------------------
using GapFillFlag = Field<Boolean, 123>;
const char GapFillFlag_NO('N');
const char GapFillFlag_YES('Y');
const size_t GapFillFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NoExecs = Field<NumInGroup, 124>;
//-------------------------------------------------------------------------------------------------
using ExpireTime = Field<UTCTimestamp, 126>;
//-------------------------------------------------------------------------------------------------
using DKReason = Field<char, 127>;
const char DKReason_UNKNOWN_SYMBOL('A');
const char DKReason_WRONG_SIDE('B');
const char DKReason_QUANTITY_EXCEEDS_ORDER('C');
const char DKReason_NO_MATCHING_ORDER('D');
const char DKReason_PRICE_EXCEEDS_LIMIT('E');
const char DKReason_CALCULATION_DIFFERENCE('F');
const char DKReason_OTHER('Z');
const size_t DKReason_realm_els(7);
//-------------------------------------------------------------------------------------------------
using DeliverToCompID = Field<f8String, 128>;
//-------------------------------------------------------------------------------------------------
using DeliverToSubID = Field<f8String, 129>;
//-------------------------------------------------------------------------------------------------
using IOINaturalFlag = Field<Boolean, 130>;
const char IOINaturalFlag_NO('N');
const char IOINaturalFlag_YES('Y');
const size_t IOINaturalFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using QuoteReqID = Field<f8String, 131>;
//-------------------------------------------------------------------------------------------------
using BidPx = Field<price, 132>;
//-------------------------------------------------------------------------------------------------
using OfferPx = Field<price, 133>;
//-------------------------------------------------------------------------------------------------
using BidSize = Field<Qty, 134>;
//-------------------------------------------------------------------------------------------------
using OfferSize = Field<Qty, 135>;
//-------------------------------------------------------------------------------------------------
using NoMiscFees = Field<NumInGroup, 136>;
//-------------------------------------------------------------------------------------------------
using MiscFeeAmt = Field<Amt, 137>;
//-------------------------------------------------------------------------------------------------
using MiscFeeCurr = Field<currency, 138>;
//-------------------------------------------------------------------------------------------------
using MiscFeeType = Field<char, 139>;
const char MiscFeeType_REGULATORY('1');
const char MiscFeeType_TAX('2');
const char MiscFeeType_LOCAL_COMMISSION('3');
const char MiscFeeType_EXCHANGE_FEES('4');
const char MiscFeeType_STAMP('5');
const char MiscFeeType_LEVY('6');
const char MiscFeeType_OTHER('7');
const char MiscFeeType_MARKUP('8');
const char MiscFeeType_CONSUMPTION_TAX('9');
const size_t MiscFeeType_realm_els(9);
//-------------------------------------------------------------------------------------------------
using PrevClosePx = Field<price, 140>;
//-------------------------------------------------------------------------------------------------
using ResetSeqNumFlag = Field<Boolean, 141>;
const char ResetSeqNumFlag_NO('N');
const char ResetSeqNumFlag_YES('Y');
const size_t ResetSeqNumFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using SenderLocationID = Field<f8String, 142>;
//-------------------------------------------------------------------------------------------------
using TargetLocationID = Field<f8String, 143>;
//-------------------------------------------------------------------------------------------------
using OnBehalfOfLocationID = Field<f8String, 144>;
//-------------------------------------------------------------------------------------------------
using DeliverToLocationID = Field<f8String, 145>;
//-------------------------------------------------------------------------------------------------
using NoRelatedSym = Field<NumInGroup, 146>;
//-------------------------------------------------------------------------------------------------
using Subject = Field<f8String, 147>;
//-------------------------------------------------------------------------------------------------
using Headline = Field<f8String, 148>;
//-------------------------------------------------------------------------------------------------
using URLLink = Field<f8String, 149>;
//-------------------------------------------------------------------------------------------------
using ExecType = Field<char, 150>;
const char ExecType_NEW('0');
const char ExecType_DONE_FOR_DAY('3');
const char ExecType_CANCELED('4');
const char ExecType_REPLACE('5');
const char ExecType_PENDING_CANCEL('6');
const char ExecType_STOPPED('7');
const char ExecType_REJECTED('8');
const char ExecType_SUSPENDED('9');
const char ExecType_PENDING_NEW('A');
const char ExecType_CALCULATED('B');
const char ExecType_EXPIRED('C');
const char ExecType_RESTATED('D');
const char ExecType_PENDING_REPLACE('E');
const char ExecType_TRADE('F');
const char ExecType_TRADE_CORRECT('G');
const char ExecType_TRADE_CANCEL('H');
const char ExecType_ORDER_STATUS('I');
const size_t ExecType_realm_els(17);
//-------------------------------------------------------------------------------------------------
using LeavesQty = Field<Qty, 151>;
//-------------------------------------------------------------------------------------------------
using CashOrderQty = Field<Qty, 152>;
//-------------------------------------------------------------------------------------------------
using AllocAvgPx = Field<price, 153>;
//-------------------------------------------------------------------------------------------------
using AllocNetMoney = Field<Amt, 154>;
//-------------------------------------------------------------------------------------------------
using SettlCurrFxRate = Field<fp_type, 155>;
//-------------------------------------------------------------------------------------------------
using SettlCurrFxRateCalc = Field<char, 156>;
const char SettlCurrFxRateCalc_DIVIDE('D');
const char SettlCurrFxRateCalc_MULTIPLY('M');
const size_t SettlCurrFxRateCalc_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NumDaysInterest = Field<int, 157>;
//-------------------------------------------------------------------------------------------------
using AccruedInterestRate = Field<Percentage, 158>;
//-------------------------------------------------------------------------------------------------
using AccruedInterestAmt = Field<Amt, 159>;
//-------------------------------------------------------------------------------------------------
using SettlInstMode = Field<char, 160>;
const char SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED('1');
const char SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT('4');
const char SettlInstMode_REQUEST_REJECT('5');
const size_t SettlInstMode_realm_els(3);
//-------------------------------------------------------------------------------------------------
using AllocText = Field<f8String, 161>;
//-------------------------------------------------------------------------------------------------
using SettlInstID = Field<f8String, 162>;
//-------------------------------------------------------------------------------------------------
using SettlInstTransType = Field<char, 163>;
const char SettlInstTransType_CANCEL('C');
const char SettlInstTransType_NEW('N');
const char SettlInstTransType_REPLACE('R');
const char SettlInstTransType_RESTATE('T');
const size_t SettlInstTransType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using EmailThreadID = Field<f8String, 164>;
//-------------------------------------------------------------------------------------------------
using SettlInstSource = Field<char, 165>;
const char SettlInstSource_BROKERS_INSTRUCTIONS('1');
const char SettlInstSource_INSTITUTIONS_INSTRUCTIONS('2');
const char SettlInstSource_INVESTOR('3');
const size_t SettlInstSource_realm_els(3);
//-------------------------------------------------------------------------------------------------
using SecurityType = Field<f8String, 167>;
const f8String SecurityType_ASSET_BACKED_SECURITIES("ABS");
const f8String SecurityType_AMENDED_RESTATED("AMENDED");
const f8String SecurityType_OTHER_ANTICIPATION_NOTES_BAN_GAN_ETC("AN");
const f8String SecurityType_BANKERS_ACCEPTANCE("BA");
const f8String SecurityType_BANK_NOTES("BN");
const f8String SecurityType_BILL_OF_EXCHANGES("BOX");
const f8String SecurityType_BRADY_BOND("BRADY");
const f8String SecurityType_BRIDGE_LOAN("BRIDGE");
const f8String SecurityType_BUY_SELLBACK("BUYSELL");
const f8String SecurityType_CONVERTIBLE_BOND("CB");
const f8String SecurityType_CERTIFICATE_OF_DEPOSIT("CD");
const f8String SecurityType_CALL_LOANS("CL");
const f8String SecurityType_CORP_MORTGAGE_BACKED_SECURITIES("CMBS");
const f8String SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION("CMO");
const f8String SecurityType_CERTIFICATE_OF_OBLIGATION("COFO");
const f8String SecurityType_CERTIFICATE_OF_PARTICIPATION("COFP");
const f8String SecurityType_CORPORATE_BOND("CORP");
const f8String SecurityType_COMMERCIAL_PAPER("CP");
const f8String SecurityType_CORPORATE_PRIVATE_PLACEMENT("CPP");
const f8String SecurityType_COMMON_STOCK("CS");
const f8String SecurityType_DEFAULTED("DEFLTED");
const f8String SecurityType_DEBTOR_IN_POSSESSION("DINP");
const f8String SecurityType_DEPOSIT_NOTES("DN");
const f8String SecurityType_DUAL_CURRENCY("DUAL");
const f8String SecurityType_EURO_CERTIFICATE_OF_DEPOSIT("EUCD");
const f8String SecurityType_EURO_CORPORATE_BOND("EUCORP");
const f8String SecurityType_EURO_COMMERCIAL_PAPER("EUCP");
const f8String SecurityType_EURO_SOVEREIGNS("EUSOV");
const f8String SecurityType_EURO_SUPRANATIONAL_COUPONS("EUSUPRA");
const f8String SecurityType_FEDERAL_AGENCY_COUPON("FAC");
const f8String SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE("FADN");
const f8String SecurityType_FOREIGN_EXCHANGE_CONTRACT("FOR");
const f8String SecurityType_FORWARD("FORWARD");
const f8String SecurityType_FUTURE("FUT");
const f8String SecurityType_GENERAL_OBLIGATION_BONDS("GO");
const f8String SecurityType_IOETTE_MORTGAGE("IET");
const f8String SecurityType_LETTER_OF_CREDIT("LOFC");
const f8String SecurityType_LIQUIDITY_NOTE("LQN");
const f8String SecurityType_MATURED("MATURED");
const f8String SecurityType_MORTGAGE_BACKED_SECURITIES("MBS");
const f8String SecurityType_MUTUAL_FUND("MF");
const f8String SecurityType_MORTGAGE_INTEREST_ONLY("MIO");
const f8String SecurityType_MULTI_LEG_INSTRUMENT("MLEG");
const f8String SecurityType_MORTGAGE_PRINCIPAL_ONLY("MPO");
const f8String SecurityType_MORTGAGE_PRIVATE_PLACEMENT("MPP");
const f8String SecurityType_MISCELLANEOUS_PASS_THROUGH("MPT");
const f8String SecurityType_MANDATORY_TENDER("MT");
const f8String SecurityType_MEDIUM_TERM_NOTES("MTN");
const f8String SecurityType_NO_SECURITY_TYPE("NONE");
const f8String SecurityType_OVERNIGHT("ONITE");
const f8String SecurityType_OPTION("OPT");
const f8String SecurityType_PRIVATE_EXPORT_FUNDING("PEF");
const f8String SecurityType_PFANDBRIEFE("PFAND");
const f8String SecurityType_PROMISSORY_NOTE("PN");
const f8String SecurityType_PREFERRED_STOCK("PS");
const f8String SecurityType_PLAZOS_FIJOS("PZFJ");
const f8String SecurityType_REVENUE_ANTICIPATION_NOTE("RAN");
const f8String SecurityType_REPLACED("REPLACD");
const f8String SecurityType_REPURCHASE("REPO");
const f8String SecurityType_RETIRED("RETIRED");
const f8String SecurityType_REVENUE_BONDS("REV");
const f8String SecurityType_REVOLVER_LOAN("RVLV");
const f8String SecurityType_REVOLVER_TERM_LOAN("RVLVTRM");
const f8String SecurityType_SECURITIES_LOAN("SECLOAN");
const f8String SecurityType_SECURITIES_PLEDGE("SECPLEDGE");
const f8String SecurityType_SPECIAL_ASSESSMENT("SPCLA");
const f8String SecurityType_SPECIAL_OBLIGATION("SPCLO");
const f8String SecurityType_SPECIAL_TAX("SPCLT");
const f8String SecurityType_SHORT_TERM_LOAN_NOTE("STN");
const f8String SecurityType_STRUCTURED_NOTES("STRUCT");
const f8String SecurityType_USD_SUPRANATIONAL_COUPONS("SUPRA");
const f8String SecurityType_SWING_LINE_FACILITY("SWING");
const f8String SecurityType_TAX_ANTICIPATION_NOTE("TAN");
const f8String SecurityType_TAX_ALLOCATION("TAXA");
const f8String SecurityType_TO_BE_ANNOUNCED("TBA");
const f8String SecurityType_US_TREASURY_BILL_TBILL("TBILL");
const f8String SecurityType_US_TREASURY_BOND("TBOND");
const f8String SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE("TCAL");
const f8String SecurityType_TIME_DEPOSIT("TD");
const f8String SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER("TECP");
const f8String SecurityType_TERM_LOAN("TERM");
const f8String SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE("TINT");
const f8String SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES("TIPS");
const f8String SecurityType_US_TREASURY_NOTE_TNOTE("TNOTE");
const f8String SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE("TPRN");
const f8String SecurityType_TAX_REVENUE_ANTICIPATION_NOTE("TRAN");
const f8String SecurityType_US_TREASURY_NOTE_UST("UST");
const f8String SecurityType_US_TREASURY_BILL_USTB("USTB");
const f8String SecurityType_VARIABLE_RATE_DEMAND_NOTE("VRDN");
const f8String SecurityType_WARRANT("WAR");
const f8String SecurityType_WITHDRAWN("WITHDRN");
const f8String SecurityType_EXTENDED_COMM_NOTE("XCN");
const f8String SecurityType_INDEXED_LINKED("XLINKD");
const f8String SecurityType_YANKEE_CORPORATE_BOND("YANK");
const f8String SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT("YCD");
const size_t SecurityType_realm_els(95);
//-------------------------------------------------------------------------------------------------
using EffectiveTime = Field<UTCTimestamp, 168>;
//-------------------------------------------------------------------------------------------------
using StandInstDbType = Field<int, 169>;
const int StandInstDbType_OTHER(0);
const int StandInstDbType_DTC_SID(1);
const int StandInstDbType_THOMSON_ALERT(2);
const int StandInstDbType_A_GLOBAL_CUSTODIAN(3);
const int StandInstDbType_ACCOUNTNET(4);
const size_t StandInstDbType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using StandInstDbName = Field<f8String, 170>;
//-------------------------------------------------------------------------------------------------
using StandInstDbID = Field<f8String, 171>;
//-------------------------------------------------------------------------------------------------
using SettlDeliveryType = Field<int, 172>;
const int SettlDeliveryType_VERSUS_PAYMENT_DELIVER(0);
const int SettlDeliveryType_FREE_DELIVER(1);
const int SettlDeliveryType_TRI_PARTY(2);
const int SettlDeliveryType_HOLD_IN_CUSTODY(3);
const size_t SettlDeliveryType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using BidSpotRate = Field<price, 188>;
//-------------------------------------------------------------------------------------------------
using BidForwardPoints = Field<PriceOffset, 189>;
//-------------------------------------------------------------------------------------------------
using OfferSpotRate = Field<price, 190>;
//-------------------------------------------------------------------------------------------------
using OfferForwardPoints = Field<PriceOffset, 191>;
//-------------------------------------------------------------------------------------------------
using OrderQty2 = Field<Qty, 192>;
//-------------------------------------------------------------------------------------------------
using SettlDate2 = Field<LocalMktDate, 193>;
//-------------------------------------------------------------------------------------------------
using LastSpotRate = Field<price, 194>;
//-------------------------------------------------------------------------------------------------
using LastForwardPoints = Field<PriceOffset, 195>;
//-------------------------------------------------------------------------------------------------
using AllocLinkID = Field<f8String, 196>;
//-------------------------------------------------------------------------------------------------
using AllocLinkType = Field<int, 197>;
const int AllocLinkType_F_X_NETTING(0);
const int AllocLinkType_F_X_SWAP(1);
const size_t AllocLinkType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using SecondaryOrderID = Field<f8String, 198>;
//-------------------------------------------------------------------------------------------------
using NoIOIQualifiers = Field<NumInGroup, 199>;
//-------------------------------------------------------------------------------------------------
using MaturityMonthYear = Field<MonthYear, 200>;
//-------------------------------------------------------------------------------------------------
using PutOrCall = Field<int, 201>;
const int PutOrCall_PUT(0);
const int PutOrCall_CALL(1);
const size_t PutOrCall_realm_els(2);
//-------------------------------------------------------------------------------------------------
using StrikePrice = Field<price, 202>;
//-------------------------------------------------------------------------------------------------
using CoveredOrUncovered = Field<int, 203>;
const int CoveredOrUncovered_COVERED(0);
const int CoveredOrUncovered_UNCOVERED(1);
const size_t CoveredOrUncovered_realm_els(2);
//-------------------------------------------------------------------------------------------------
using OptAttribute = Field<char, 206>;
//-------------------------------------------------------------------------------------------------
using SecurityExchange = Field<Exchange, 207>;
//-------------------------------------------------------------------------------------------------
using NotifyBrokerOfCredit = Field<Boolean, 208>;
const char NotifyBrokerOfCredit_NO('N');
const char NotifyBrokerOfCredit_YES('Y');
const size_t NotifyBrokerOfCredit_realm_els(2);
//-------------------------------------------------------------------------------------------------
using AllocHandlInst = Field<int, 209>;
const int AllocHandlInst_MATCH(1);
const int AllocHandlInst_FORWARD(2);
const int AllocHandlInst_FORWARD_AND_MATCH(3);
const size_t AllocHandlInst_realm_els(3);
//-------------------------------------------------------------------------------------------------
using MaxShow = Field<Qty, 210>;
//-------------------------------------------------------------------------------------------------
using PegOffsetValue = Field<fp_type, 211>;
//-------------------------------------------------------------------------------------------------
using XmlDataLen = Field<Length, 212>;
//-------------------------------------------------------------------------------------------------
using XmlData = Field<data, 213>;
//-------------------------------------------------------------------------------------------------
using SettlInstRefID = Field<f8String, 214>;
//-------------------------------------------------------------------------------------------------
using NoRoutingIDs = Field<NumInGroup, 215>;
//-------------------------------------------------------------------------------------------------
using RoutingType = Field<int, 216>;
const int RoutingType_TARGET_FIRM(1);
const int RoutingType_TARGET_LIST(2);
const int RoutingType_BLOCK_FIRM(3);
const int RoutingType_BLOCK_LIST(4);
const size_t RoutingType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using RoutingID = Field<f8String, 217>;
//-------------------------------------------------------------------------------------------------
using Spread = Field<PriceOffset, 218>;
//-------------------------------------------------------------------------------------------------
using BenchmarkCurveCurrency = Field<currency, 220>;
//-------------------------------------------------------------------------------------------------
using BenchmarkCurveName = Field<f8String, 221>;
//-------------------------------------------------------------------------------------------------
using BenchmarkCurvePoint = Field<f8String, 222>;
//-------------------------------------------------------------------------------------------------
using CouponRate = Field<Percentage, 223>;
//-------------------------------------------------------------------------------------------------
using CouponPaymentDate = Field<LocalMktDate, 224>;
//-------------------------------------------------------------------------------------------------
using IssueDate = Field<LocalMktDate, 225>;
//-------------------------------------------------------------------------------------------------
using RepurchaseTerm = Field<int, 226>;
//-------------------------------------------------------------------------------------------------
using RepurchaseRate = Field<Percentage, 227>;
//-------------------------------------------------------------------------------------------------
using Factor = Field<fp_type, 228>;
//-------------------------------------------------------------------------------------------------
using TradeOriginationDate = Field<LocalMktDate, 229>;
//-------------------------------------------------------------------------------------------------
using ExDate = Field<LocalMktDate, 230>;
//-------------------------------------------------------------------------------------------------
using ContractMultiplier = Field<fp_type, 231>;
//-------------------------------------------------------------------------------------------------
using NoStipulations = Field<NumInGroup, 232>;
//-------------------------------------------------------------------------------------------------
using StipulationType = Field<f8String, 233>;
const f8String StipulationType_AMT("AMT");
const f8String StipulationType_AUTO_REINVESTMENT_AT_RATE_OR_BETTER("AUTOREINV");
const f8String StipulationType_BANK_QUALIFIED("BANKQUAL");
const f8String StipulationType_BARGAIN_CONDITIONS_SEE("BGNCON");
const f8String StipulationType_COUPON_RANGE("COUPON");
const f8String StipulationType_ISO_CURRENCY_CODE("CURRENCY");
const f8String StipulationType_CUSTOM_START_END_DATE("CUSTOMDATE");
const f8String StipulationType_GEOGRAPHICS_AND_RANGE("GEOG");
const f8String StipulationType_VALUATION_DISCOUNT("HAIRCUT");
const f8String StipulationType_INSURED("INSURED");
const f8String StipulationType_YEAR_OR_YEAR_MONTH_OF_ISSUE("ISSUE");
const f8String StipulationType_ISSUERS_TICKER("ISSUER");
const f8String StipulationType_ISSUE_SIZE_RANGE("ISSUESIZE");
const f8String StipulationType_LOOKBACK_DAYS("LOOKBACK");
const f8String StipulationType_EXPLICIT_LOT_IDENTIFIER("LOT");
const f8String StipulationType_LOT_VARIANCE("LOTVAR");
const f8String StipulationType_MATURITY_YEAR_AND_MONTH("MAT");
const f8String StipulationType_MATURITY_RANGE("MATURITY");
const f8String StipulationType_MAXIMUM_SUBSTITUTIONS("MAXSUBS");
const f8String StipulationType_MINIMUM_DENOMINATION("MINDNOM");
const f8String StipulationType_MINIMUM_INCREMENT("MININCR");
const f8String StipulationType_MINIMUM_QUANTITY("MINQTY");
const f8String StipulationType_PAYMENT_FREQUENCY_CALENDAR("PAYFREQ");
const f8String StipulationType_NUMBER_OF_PIECES("PIECES");
const f8String StipulationType_POOLS_MAXIMUM("PMAX");
const f8String StipulationType_POOLS_PER_LOT("PPL");
const f8String StipulationType_POOLS_PER_MILLION("PPM");
const f8String StipulationType_POOLS_PER_TRADE("PPT");
const f8String StipulationType_PRICE_RANGE("PRICE");
const f8String StipulationType_PRICING_FREQUENCY("PRICEFREQ");
const f8String StipulationType_PRODUCTION_YEAR("PROD");
const f8String StipulationType_CALL_PROTECTION("PROTECT");
const f8String StipulationType_PURPOSE("PURPOSE");
const f8String StipulationType_BENCHMARK_PRICE_SOURCE("PXSOURCE");
const f8String StipulationType_RATING_SOURCE_AND_RANGE("RATING");
const f8String StipulationType_TYPE_OF_REDEMPTION_VALUES_ARE_NONCALLABLE_CALLABLE_PREFUNDED_ESCROWEDTOMATURITY_PUTABLE_CONVERTIBLE("REDEMPTION");
const f8String StipulationType_RESTRICTED("RESTRICTED");
const f8String StipulationType_MARKET_SECTOR("SECTOR");
const f8String StipulationType_SECURITYTYPE_INCLUDED_OR_EXCLUDED("SECTYPE");
const f8String StipulationType_STRUCTURE("STRUCT");
const f8String StipulationType_SUBSTITUTIONS_FREQUENCY("SUBSFREQ");
const f8String StipulationType_SUBSTITUTIONS_LEFT("SUBSLEFT");
const f8String StipulationType_FREEFORM_TEXT("TEXT");
const f8String StipulationType_TRADE_VARIANCE("TRDVAR");
const f8String StipulationType_WEIGHTED_AVERAGE_COUPONVALUE_IN_PERCENT("WAC");
const f8String StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON_VALUE_IN_PERCENT("WAL");
const f8String StipulationType_WEIGHTED_AVERAGE_LOAN_AGE_VALUE_IN_MONTHS("WALA");
const f8String StipulationType_WEIGHTED_AVERAGE_MATURITY_VALUE_IN_MONTHS("WAM");
const f8String StipulationType_WHOLE_POOL("WHOLE");
const f8String StipulationType_YIELD_RANGE("YIELD");
const size_t StipulationType_realm_els(50);
//-------------------------------------------------------------------------------------------------
using StipulationValue = Field<f8String, 234>;
//-------------------------------------------------------------------------------------------------
using YieldType = Field<f8String, 235>;
const f8String YieldType_AFTER_TAX_YIELD("AFTERTAX");
const f8String YieldType_ANNUAL_YIELD("ANNUAL");
const f8String YieldType_YIELD_AT_ISSUE("ATISSUE");
const f8String YieldType_YIELD_TO_AVERAGE_MATURITY("AVGMATURITY");
const f8String YieldType_BOOK_YIELD("BOOK");
const f8String YieldType_YIELD_TO_NEXT_CALL("CALL");
const f8String YieldType_YIELD_CHANGE_SINCE_CLOSE("CHANGE");
const f8String YieldType_CLOSING_YIELD("CLOSE");
const f8String YieldType_COMPOUND_YIELD("COMPOUND");
const f8String YieldType_CURRENT_YIELD("CURRENT");
const f8String YieldType_GOVERNMENT_EQUIVALENT_YIELD("GOVTEQUIV");
const f8String YieldType_TRUE_GROSS_YIELD("GROSS");
const f8String YieldType_YIELD_WITH_INFLATION_ASSUMPTION("INFLATION");
const f8String YieldType_INVERSE_FLOATER_BOND_YIELD("INVERSEFLOATER");
const f8String YieldType_MOST_RECENT_CLOSING_YIELD("LASTCLOSE");
const f8String YieldType_CLOSING_YIELD_MOST_RECENT_MONTH("LASTMONTH");
const f8String YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER("LASTQUARTER");
const f8String YieldType_CLOSING_YIELD_MOST_RECENT_YEAR("LASTYEAR");
const f8String YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE("LONGAVGLIFE");
const f8String YieldType_MARK_TO_MARKET_YIELD("MARK");
const f8String YieldType_YIELD_TO_MATURITY("MATURITY");
const f8String YieldType_YIELD_TO_NEXT_REFUND("NEXTREFUND");
const f8String YieldType_OPEN_AVERAGE_YIELD("OPENAVG");
const f8String YieldType_PREVIOUS_CLOSE_YIELD("PREVCLOSE");
const f8String YieldType_PROCEEDS_YIELD("PROCEEDS");
const f8String YieldType_YIELD_TO_NEXT_PUT("PUT");
const f8String YieldType_SEMI_ANNUAL_YIELD("SEMIANNUAL");
const f8String YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE("SHORTAVGLIFE");
const f8String YieldType_SIMPLE_YIELD("SIMPLE");
const f8String YieldType_TAX_EQUIVALENT_YIELD("TAXEQUIV");
const f8String YieldType_YIELD_TO_TENDER_DATE("TENDER");
const f8String YieldType_TRUE_YIELD("TRUE");
const f8String YieldType_YIELD_VALUE_OF_1_32("VALUE1/32");
const f8String YieldType_YIELD_TO_WORST("WORST");
const size_t YieldType_realm_els(34);
//-------------------------------------------------------------------------------------------------
using Yield = Field<Percentage, 236>;
//-------------------------------------------------------------------------------------------------
using TotalTakedown = Field<Amt, 237>;
//-------------------------------------------------------------------------------------------------
using Concession = Field<Amt, 238>;
//-------------------------------------------------------------------------------------------------
using RepoCollateralSecurityType = Field<f8String, 239>;
//-------------------------------------------------------------------------------------------------
using RedemptionDate = Field<LocalMktDate, 240>;
//-------------------------------------------------------------------------------------------------
using UnderlyingCouponPaymentDate = Field<LocalMktDate, 241>;
//-------------------------------------------------------------------------------------------------
using UnderlyingIssueDate = Field<LocalMktDate, 242>;
//-------------------------------------------------------------------------------------------------
using UnderlyingRepoCollateralSecurityType = Field<f8String, 243>;
//-------------------------------------------------------------------------------------------------
using UnderlyingRepurchaseTerm = Field<int, 244>;
//-------------------------------------------------------------------------------------------------
using UnderlyingRepurchaseRate = Field<Percentage, 245>;
//-------------------------------------------------------------------------------------------------
using UnderlyingFactor = Field<fp_type, 246>;
//-------------------------------------------------------------------------------------------------
using UnderlyingRedemptionDate = Field<LocalMktDate, 247>;
//-------------------------------------------------------------------------------------------------
using LegCouponPaymentDate = Field<LocalMktDate, 248>;
//-------------------------------------------------------------------------------------------------
using LegIssueDate = Field<LocalMktDate, 249>;
//-------------------------------------------------------------------------------------------------
using LegRepoCollateralSecurityType = Field<f8String, 250>;
//-------------------------------------------------------------------------------------------------
using LegRepurchaseTerm = Field<int, 251>;
//-------------------------------------------------------------------------------------------------
using LegRepurchaseRate = Field<Percentage, 252>;
//-------------------------------------------------------------------------------------------------
using LegFactor = Field<fp_type, 253>;
//-------------------------------------------------------------------------------------------------
using LegRedemptionDate = Field<LocalMktDate, 254>;
//-------------------------------------------------------------------------------------------------
using CreditRating = Field<f8String, 255>;
//-------------------------------------------------------------------------------------------------
using UnderlyingCreditRating = Field<f8String, 256>;
//-------------------------------------------------------------------------------------------------
using LegCreditRating = Field<f8String, 257>;
//-------------------------------------------------------------------------------------------------
using TradedFlatSwitch = Field<Boolean, 258>;
const char TradedFlatSwitch_NO('N');
const char TradedFlatSwitch_YES('Y');
const size_t TradedFlatSwitch_realm_els(2);
//-------------------------------------------------------------------------------------------------
using BasisFeatureDate = Field<LocalMktDate, 259>;
//-------------------------------------------------------------------------------------------------
using BasisFeaturePrice = Field<price, 260>;
//-------------------------------------------------------------------------------------------------
using MDReqID = Field<f8String, 262>;
//-------------------------------------------------------------------------------------------------
using SubscriptionRequestType = Field<char, 263>;
const char SubscriptionRequestType_SNAPSHOT('0');
const char SubscriptionRequestType_SNAPSHOT_PLUS_UPDATES('1');
const char SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST('2');
const size_t SubscriptionRequestType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using MarketDepth = Field<int, 264>;
//-------------------------------------------------------------------------------------------------
using MDUpdateType = Field<int, 265>;
const int MDUpdateType_FULL_REFRESH(0);
const int MDUpdateType_INCREMENTAL_REFRESH(1);
const size_t MDUpdateType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using AggregatedBook = Field<Boolean, 266>;
const char AggregatedBook_NO('N');
const char AggregatedBook_YES('Y');
const size_t AggregatedBook_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NoMDEntryTypes = Field<NumInGroup, 267>;
//-------------------------------------------------------------------------------------------------
using NoMDEntries = Field<NumInGroup, 268>;
//-------------------------------------------------------------------------------------------------
using MDEntryType = Field<char, 269>;
const char MDEntryType_BID('0');
const char MDEntryType_OFFER('1');
const char MDEntryType_TRADE('2');
const char MDEntryType_INDEX_VALUE('3');
const char MDEntryType_OPENING_PRICE('4');
const char MDEntryType_CLOSING_PRICE('5');
const char MDEntryType_SETTLEMENT_PRICE('6');
const char MDEntryType_TRADING_SESSION_HIGH_PRICE('7');
const char MDEntryType_TRADING_SESSION_LOW_PRICE('8');
const char MDEntryType_TRADING_SESSION_VWAP_PRICE('9');
const char MDEntryType_IMBALANCE('A');
const char MDEntryType_TRADE_VOLUME('B');
const char MDEntryType_OPEN_INTEREST('C');
const size_t MDEntryType_realm_els(13);
//-------------------------------------------------------------------------------------------------
using MDEntryPx = Field<price, 270>;
//-------------------------------------------------------------------------------------------------
using MDEntrySize = Field<Qty, 271>;
//-------------------------------------------------------------------------------------------------
using MDEntryDate = Field<UTCDateOnly, 272>;
//-------------------------------------------------------------------------------------------------
using MDEntryTime = Field<UTCTimeOnly, 273>;
//-------------------------------------------------------------------------------------------------
using TickDirection = Field<char, 274>;
const char TickDirection_PLUS_TICK('0');
const char TickDirection_ZERO_PLUS_TICK('1');
const char TickDirection_MINUS_TICK('2');
const char TickDirection_ZERO_MINUS_TICK('3');
const size_t TickDirection_realm_els(4);
//-------------------------------------------------------------------------------------------------
using MDMkt = Field<Exchange, 275>;
//-------------------------------------------------------------------------------------------------
using QuoteCondition = Field<MultipleStringValue, 276>;
const f8String QuoteCondition_OPEN("A");
const f8String QuoteCondition_CLOSED("B");
const f8String QuoteCondition_EXCHANGE_BEST("C");
const f8String QuoteCondition_CONSOLIDATED_BEST("D");
const f8String QuoteCondition_LOCKED("E");
const f8String QuoteCondition_CROSSED("F");
const f8String QuoteCondition_DEPTH("G");
const f8String QuoteCondition_FAST_TRADING("H");
const f8String QuoteCondition_NON_FIRM("I");
const size_t QuoteCondition_realm_els(9);
//-------------------------------------------------------------------------------------------------
using TradeCondition = Field<MultipleStringValue, 277>;
const f8String TradeCondition_CASH("A");
const f8String TradeCondition_AVERAGE_PRICE_TRADE("B");
const f8String TradeCondition_CASH_TRADE("C");
const f8String TradeCondition_NEXT_DAY("D");
const f8String TradeCondition_OPENING("E");
const f8String TradeCondition_INTRADAY_TRADE_DETAIL("F");
const f8String TradeCondition_RULE_127_TRADE("G");
const f8String TradeCondition_RULE_155_TRADE("H");
const f8String TradeCondition_SOLD_LAST("I");
const f8String TradeCondition_NEXT_DAY_TRADE("J");
const f8String TradeCondition_OPENED("K");
const f8String TradeCondition_SELLER("L");
const f8String TradeCondition_SOLD("M");
const f8String TradeCondition_STOPPED_STOCK("N");
const f8String TradeCondition_IMBALANCE_MORE_BUYERS("P");
const f8String TradeCondition_IMBALANCE_MORE_SELLERS("Q");
const f8String TradeCondition_OPENING_PRICE("R");
const size_t TradeCondition_realm_els(17);
//-------------------------------------------------------------------------------------------------
using MDEntryID = Field<f8String, 278>;
//-------------------------------------------------------------------------------------------------
using MDUpdateAction = Field<char, 279>;
const char MDUpdateAction_NEW('0');
const char MDUpdateAction_CHANGE('1');
const char MDUpdateAction_DELETE('2');
const size_t MDUpdateAction_realm_els(3);
//-------------------------------------------------------------------------------------------------
using MDEntryRefID = Field<f8String, 280>;
//-------------------------------------------------------------------------------------------------
using MDReqRejReason = Field<char, 281>;
const char MDReqRejReason_UNKNOWN_SYMBOL('0');
const char MDReqRejReason_DUPLICATE_MDREQID('1');
const char MDReqRejReason_INSUFFICIENT_BANDWIDTH('2');
const char MDReqRejReason_INSUFFICIENT_PERMISSIONS('3');
const char MDReqRejReason_UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE('4');
const char MDReqRejReason_UNSUPPORTED_MARKETDEPTH('5');
const char MDReqRejReason_UNSUPPORTED_MDUPDATETYPE('6');
const char MDReqRejReason_UNSUPPORTED_AGGREGATEDBOOK('7');
const char MDReqRejReason_UNSUPPORTED_MDENTRYTYPE('8');
const char MDReqRejReason_UNSUPPORTED_TRADINGSESSIONID('9');
const char MDReqRejReason_UNSUPPORTED_SCOPE('A');
const char MDReqRejReason_UNSUPPORTED_OPENCLOSESETTLEFLAG('B');
const char MDReqRejReason_UNSUPPORTED_MDIMPLICITDELETE('C');
const size_t MDReqRejReason_realm_els(13);
//-------------------------------------------------------------------------------------------------
using MDEntryOriginator = Field<f8String, 282>;
//-------------------------------------------------------------------------------------------------
using LocationID = Field<f8String, 283>;
//-------------------------------------------------------------------------------------------------
using DeskID = Field<f8String, 284>;
//-------------------------------------------------------------------------------------------------
using DeleteReason = Field<char, 285>;
const char DeleteReason_CANCELATION('0');
const char DeleteReason_ERROR('1');
const size_t DeleteReason_realm_els(2);
//-------------------------------------------------------------------------------------------------
using OpenCloseSettlFlag = Field<MultipleStringValue, 286>;
const f8String OpenCloseSettlFlag_DAILY_OPEN("0");
const f8String OpenCloseSettlFlag_SESSION_OPEN("1");
const f8String OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY("2");
const f8String OpenCloseSettlFlag_EXPECTED_ENTRY("3");
const f8String OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY("4");
const f8String OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE("5");
const size_t OpenCloseSettlFlag_realm_els(6);
//-------------------------------------------------------------------------------------------------
using SellerDays = Field<int, 287>;
//-------------------------------------------------------------------------------------------------
using MDEntryBuyer = Field<f8String, 288>;
//-------------------------------------------------------------------------------------------------
using MDEntrySeller = Field<f8String, 289>;
//-------------------------------------------------------------------------------------------------
using MDEntryPositionNo = Field<int, 290>;
//-------------------------------------------------------------------------------------------------
using FinancialStatus = Field<MultipleStringValue, 291>;
const f8String FinancialStatus_BANKRUPT("1");
const f8String FinancialStatus_PENDING_DELISTING("2");
const size_t FinancialStatus_realm_els(2);
//-------------------------------------------------------------------------------------------------
using CorporateAction = Field<MultipleStringValue, 292>;
const f8String CorporateAction_EX_DIVIDEND("A");
const f8String CorporateAction_EX_DISTRIBUTION("B");
const f8String CorporateAction_EX_RIGHTS("C");
const f8String CorporateAction_NEW("D");
const f8String CorporateAction_EX_INTEREST("E");
const size_t CorporateAction_realm_els(5);
//-------------------------------------------------------------------------------------------------
using DefBidSize = Field<Qty, 293>;
//-------------------------------------------------------------------------------------------------
using DefOfferSize = Field<Qty, 294>;
//-------------------------------------------------------------------------------------------------
using NoQuoteEntries = Field<NumInGroup, 295>;
//-------------------------------------------------------------------------------------------------
using NoQuoteSets = Field<NumInGroup, 296>;
//-------------------------------------------------------------------------------------------------
using QuoteStatus = Field<int, 297>;
const int QuoteStatus_ACCEPTED(0);
const int QuoteStatus_CANCELED_FOR_SYMBOL(1);
const int QuoteStatus_CANCELED_FOR_SECURITY_TYPE(2);
const int QuoteStatus_CANCELED_FOR_UNDERLYING(3);
const int QuoteStatus_CANCELED_ALL(4);
const int QuoteStatus_REJECTED(5);
const int QuoteStatus_REMOVED_FROM_MARKET(6);
const int QuoteStatus_EXPIRED(7);
const int QuoteStatus_QUERY(8);
const int QuoteStatus_QUOTE_NOT_FOUND(9);
const int QuoteStatus_PENDING(10);
const int QuoteStatus_PASS(11);
const int QuoteStatus_LOCKED_MARKET_WARNING(12);
const int QuoteStatus_CROSS_MARKET_WARNING(13);
const int QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET(14);
const int QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET(15);
const size_t QuoteStatus_realm_els(16);
//-------------------------------------------------------------------------------------------------
using QuoteCancelType = Field<int, 298>;
const int QuoteCancelType_CANCEL_FOR_SYMBOL(1);
const int QuoteCancelType_CANCEL_FOR_SECURITY_TYPE(2);
const int QuoteCancelType_CANCEL_FOR_UNDERLYING_SYMBOL(3);
const int QuoteCancelType_CANCEL_ALL_QUOTES(4);
const size_t QuoteCancelType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using QuoteEntryID = Field<f8String, 299>;
//-------------------------------------------------------------------------------------------------
using QuoteRejectReason = Field<int, 300>;
const int QuoteRejectReason_UNKNOWN_SYMBOL(1);
const int QuoteRejectReason_EXCHANGE(2);
const int QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT(3);
const int QuoteRejectReason_TOO_LATE_TO_ENTER(4);
const int QuoteRejectReason_UNKNOWN_QUOTE(5);
const int QuoteRejectReason_DUPLICATE_QUOTE(6);
const int QuoteRejectReason_INVALID_BID_ASK_SPREAD(7);
const int QuoteRejectReason_INVALID_PRICE(8);
const int QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY(9);
const int QuoteRejectReason_OTHER(99);
const size_t QuoteRejectReason_realm_els(10);
//-------------------------------------------------------------------------------------------------
using QuoteResponseLevel = Field<int, 301>;
const int QuoteResponseLevel_NO_ACKNOWLEDGEMENT(0);
const int QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES(1);
const int QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGES(2);
const size_t QuoteResponseLevel_realm_els(3);
//-------------------------------------------------------------------------------------------------
using QuoteSetID = Field<f8String, 302>;
//-------------------------------------------------------------------------------------------------
using QuoteRequestType = Field<int, 303>;
const int QuoteRequestType_MANUAL(1);
const int QuoteRequestType_AUTOMATIC(2);
const size_t QuoteRequestType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using TotNoQuoteEntries = Field<int, 304>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityIDSource = Field<f8String, 305>;
//-------------------------------------------------------------------------------------------------
using UnderlyingIssuer = Field<f8String, 306>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityDesc = Field<f8String, 307>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityExchange = Field<Exchange, 308>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityID = Field<f8String, 309>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityType = Field<f8String, 310>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSymbol = Field<f8String, 311>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSymbolSfx = Field<f8String, 312>;
//-------------------------------------------------------------------------------------------------
using UnderlyingMaturityMonthYear = Field<MonthYear, 313>;
//-------------------------------------------------------------------------------------------------
using UnderlyingPutOrCall = Field<int, 315>;
//-------------------------------------------------------------------------------------------------
using UnderlyingStrikePrice = Field<price, 316>;
//-------------------------------------------------------------------------------------------------
using UnderlyingOptAttribute = Field<char, 317>;
//-------------------------------------------------------------------------------------------------
using UnderlyingCurrency = Field<currency, 318>;
//-------------------------------------------------------------------------------------------------
using SecurityReqID = Field<f8String, 320>;
//-------------------------------------------------------------------------------------------------
using SecurityRequestType = Field<int, 321>;
const int SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS(0);
const int SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED(1);
const int SecurityRequestType_REQUEST_LIST_SECURITY_TYPES(2);
const int SecurityRequestType_REQUEST_LIST_SECURITIES(3);
const size_t SecurityRequestType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using SecurityResponseID = Field<f8String, 322>;
//-------------------------------------------------------------------------------------------------
using SecurityResponseType = Field<int, 323>;
const int SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_AS_IS(1);
const int SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE(2);
const int SecurityResponseType_REJECT_SECURITY_PROPOSAL(5);
const int SecurityResponseType_CAN_NOT_MATCH_SELECTION_CRITERIA(6);
const size_t SecurityResponseType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using SecurityStatusReqID = Field<f8String, 324>;
//-------------------------------------------------------------------------------------------------
using UnsolicitedIndicator = Field<Boolean, 325>;
const char UnsolicitedIndicator_NO('N');
const char UnsolicitedIndicator_YES('Y');
const size_t UnsolicitedIndicator_realm_els(2);
//-------------------------------------------------------------------------------------------------
using SecurityTradingStatus = Field<int, 326>;
const int SecurityTradingStatus_OPENING_DELAY(1);
const int SecurityTradingStatus_TRADING_HALT(2);
const int SecurityTradingStatus_RESUME(3);
const int SecurityTradingStatus_NO_OPEN_NO_RESUME(4);
const int SecurityTradingStatus_PRICE_INDICATION(5);
const int SecurityTradingStatus_TRADING_RANGE_INDICATION(6);
const int SecurityTradingStatus_MARKET_IMBALANCE_BUY(7);
const int SecurityTradingStatus_MARKET_IMBALANCE_SELL(8);
const int SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY(9);
const int SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL(10);
const int SecurityTradingStatus_NO_MARKET_IMBALANCE(12);
const int SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE(13);
const int SecurityTradingStatus_ITS_PRE_OPENING(14);
const int SecurityTradingStatus_NEW_PRICE_INDICATION(15);
const int SecurityTradingStatus_TRADE_DISSEMINATION_TIME(16);
const int SecurityTradingStatus_READY_TO_TRADE(17);
const int SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING(18);
const int SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET(19);
const int SecurityTradingStatus_UNKNOWN_OR_INVALID(20);
const int SecurityTradingStatus_PRE_OPEN(21);
const int SecurityTradingStatus_OPENING_ROTATION(22);
const int SecurityTradingStatus_FAST_MARKET(23);
const size_t SecurityTradingStatus_realm_els(22);
//-------------------------------------------------------------------------------------------------
using HaltReasonChar = Field<char, 327>;
const char HaltReasonChar_NEWS_DISSEMINATION('D');
const char HaltReasonChar_ORDER_INFLUX('E');
const char HaltReasonChar_ORDER_IMBALANCE('I');
const char HaltReasonChar_ADDITIONAL_INFORMATION('M');
const char HaltReasonChar_NEWS_PENDING('P');
const char HaltReasonChar_EQUIPMENT_CHANGEOVER('X');
const size_t HaltReasonChar_realm_els(6);
//-------------------------------------------------------------------------------------------------
using InViewOfCommon = Field<Boolean, 328>;
const char InViewOfCommon_NO('N');
const char InViewOfCommon_YES('Y');
const size_t InViewOfCommon_realm_els(2);
//-------------------------------------------------------------------------------------------------
using DueToRelated = Field<Boolean, 329>;
const char DueToRelated_NO('N');
const char DueToRelated_YES('Y');
const size_t DueToRelated_realm_els(2);
//-------------------------------------------------------------------------------------------------
using BuyVolume = Field<Qty, 330>;
//-------------------------------------------------------------------------------------------------
using SellVolume = Field<Qty, 331>;
//-------------------------------------------------------------------------------------------------
using HighPx = Field<price, 332>;
//-------------------------------------------------------------------------------------------------
using LowPx = Field<price, 333>;
//-------------------------------------------------------------------------------------------------
using Adjustment = Field<int, 334>;
const int Adjustment_CANCEL(1);
const int Adjustment_ERROR(2);
const int Adjustment_CORRECTION(3);
const size_t Adjustment_realm_els(3);
//-------------------------------------------------------------------------------------------------
using TradSesReqID = Field<f8String, 335>;
//-------------------------------------------------------------------------------------------------
using TradingSessionID = Field<f8String, 336>;
//-------------------------------------------------------------------------------------------------
using ContraTrader = Field<f8String, 337>;
//-------------------------------------------------------------------------------------------------
using TradSesMethod = Field<int, 338>;
const int TradSesMethod_ELECTRONIC(1);
const int TradSesMethod_OPEN_OUTCRY(2);
const int TradSesMethod_TWO_PARTY(3);
const size_t TradSesMethod_realm_els(3);
//-------------------------------------------------------------------------------------------------
using TradSesMode = Field<int, 339>;
const int TradSesMode_TESTING(1);
const int TradSesMode_SIMULATED(2);
const int TradSesMode_PRODUCTION(3);
const size_t TradSesMode_realm_els(3);
//-------------------------------------------------------------------------------------------------
using TradSesStatus = Field<int, 340>;
const int TradSesStatus_UNKNOWN(0);
const int TradSesStatus_HALTED(1);
const int TradSesStatus_OPEN(2);
const int TradSesStatus_CLOSED(3);
const int TradSesStatus_PRE_OPEN(4);
const int TradSesStatus_PRE_CLOSE(5);
const int TradSesStatus_REQUEST_REJECTED(6);
const size_t TradSesStatus_realm_els(7);
//-------------------------------------------------------------------------------------------------
using TradSesStartTime = Field<UTCTimestamp, 341>;
//-------------------------------------------------------------------------------------------------
using TradSesOpenTime = Field<UTCTimestamp, 342>;
//-------------------------------------------------------------------------------------------------
using TradSesPreCloseTime = Field<UTCTimestamp, 343>;
//-------------------------------------------------------------------------------------------------
using TradSesCloseTime = Field<UTCTimestamp, 344>;
//-------------------------------------------------------------------------------------------------
using TradSesEndTime = Field<UTCTimestamp, 345>;
//-------------------------------------------------------------------------------------------------
using NumberOfOrders = Field<int, 346>;
//-------------------------------------------------------------------------------------------------
using MessageEncoding = Field<f8String, 347>;
const f8String MessageEncoding_EUC("EUC-JP");
const f8String MessageEncoding_JIS("ISO-2022-JP");
const f8String MessageEncoding_FOR_USING_SJIS("Shift_JIS");
const f8String MessageEncoding_UNICODE("UTF-8");
const size_t MessageEncoding_realm_els(4);
//-------------------------------------------------------------------------------------------------
using EncodedIssuerLen = Field<Length, 348>;
//-------------------------------------------------------------------------------------------------
using EncodedIssuer = Field<data, 349>;
//-------------------------------------------------------------------------------------------------
using EncodedSecurityDescLen = Field<Length, 350>;
//-------------------------------------------------------------------------------------------------
using EncodedSecurityDesc = Field<data, 351>;
//-------------------------------------------------------------------------------------------------
using EncodedListExecInstLen = Field<Length, 352>;
//-------------------------------------------------------------------------------------------------
using EncodedListExecInst = Field<data, 353>;
//-------------------------------------------------------------------------------------------------
using EncodedTextLen = Field<Length, 354>;
//-------------------------------------------------------------------------------------------------
using EncodedText = Field<data, 355>;
//-------------------------------------------------------------------------------------------------
using EncodedSubjectLen = Field<Length, 356>;
//-------------------------------------------------------------------------------------------------
using EncodedSubject = Field<data, 357>;
//-------------------------------------------------------------------------------------------------
using EncodedHeadlineLen = Field<Length, 358>;
//-------------------------------------------------------------------------------------------------
using EncodedHeadline = Field<data, 359>;
//-------------------------------------------------------------------------------------------------
using EncodedAllocTextLen = Field<Length, 360>;
//-------------------------------------------------------------------------------------------------
using EncodedAllocText = Field<data, 361>;
//-------------------------------------------------------------------------------------------------
using EncodedUnderlyingIssuerLen = Field<Length, 362>;
//-------------------------------------------------------------------------------------------------
using EncodedUnderlyingIssuer = Field<data, 363>;
//-------------------------------------------------------------------------------------------------
using EncodedUnderlyingSecurityDescLen = Field<Length, 364>;
//-------------------------------------------------------------------------------------------------
using EncodedUnderlyingSecurityDesc = Field<data, 365>;
//-------------------------------------------------------------------------------------------------
using AllocPrice = Field<price, 366>;
//-------------------------------------------------------------------------------------------------
using QuoteSetValidUntilTime = Field<UTCTimestamp, 367>;
//-------------------------------------------------------------------------------------------------
using QuoteEntryRejectReason = Field<int, 368>;
//-------------------------------------------------------------------------------------------------
using LastMsgSeqNumProcessed = Field<SeqNum, 369>;
//-------------------------------------------------------------------------------------------------
using RefTagID = Field<int, 371>;
//-------------------------------------------------------------------------------------------------
using RefMsgType = Field<f8String, 372>;
//-------------------------------------------------------------------------------------------------
using SessionRejectReason = Field<int, 373>;
const int SessionRejectReason_INVALID_TAG_NUMBER(0);
const int SessionRejectReason_REQUIRED_TAG_MISSING(1);
const int SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE(2);
const int SessionRejectReason_UNDEFINED_TAG(3);
const int SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE(4);
const int SessionRejectReason_VALUE_IS_INCORRECT(5);
const int SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE(6);
const int SessionRejectReason_DECRYPTION_PROBLEM(7);
const int SessionRejectReason_SIGNATURE_PROBLEM(8);
const int SessionRejectReason_COMPID_PROBLEM(9);
const int SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM(10);
const int SessionRejectReason_INVALID_MSGTYPE(11);
const int SessionRejectReason_XML_VALIDATION_ERROR(12);
const int SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE(13);
const int SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER(14);
const int SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER(15);
const int SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP(16);
const int SessionRejectReason_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER(17);
const int SessionRejectReason_OTHER(99);
const size_t SessionRejectReason_realm_els(19);
//-------------------------------------------------------------------------------------------------
using BidRequestTransType = Field<char, 374>;
const char BidRequestTransType_CANCEL('C');
const char BidRequestTransType_NEW('N');
const size_t BidRequestTransType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ContraBroker = Field<f8String, 375>;
//-------------------------------------------------------------------------------------------------
using ComplianceID = Field<f8String, 376>;
//-------------------------------------------------------------------------------------------------
using SolicitedFlag = Field<Boolean, 377>;
const char SolicitedFlag_NO('N');
const char SolicitedFlag_YES('Y');
const size_t SolicitedFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ExecRestatementReason = Field<int, 378>;
const int ExecRestatementReason_GT_CORPORATE_ACTION(0);
const int ExecRestatementReason_GT_RENEWAL(1);
const int ExecRestatementReason_VERBAL_CHANGE(2);
const int ExecRestatementReason_REPRICING_OF_ORDER(3);
const int ExecRestatementReason_BROKER_OPTION(4);
const int ExecRestatementReason_PARTIAL_DECLINE_OF_ORDERQTY(5);
const int ExecRestatementReason_CANCEL_ON_TRADING_HALT(6);
const int ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE(7);
const int ExecRestatementReason_MARKET(8);
const int ExecRestatementReason_CANCELED_NOT_BEST(9);
const int ExecRestatementReason_WAREHOUSE_RECAP(10);
const int ExecRestatementReason_OTHER(99);
const size_t ExecRestatementReason_realm_els(12);
//-------------------------------------------------------------------------------------------------
using BusinessRejectRefID = Field<f8String, 379>;
//-------------------------------------------------------------------------------------------------
using BusinessRejectReason = Field<int, 380>;
const int BusinessRejectReason_OTHER(0);
const int BusinessRejectReason_UNKOWN_ID(1);
const int BusinessRejectReason_UNKNOWN_SECURITY(2);
const int BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE(3);
const int BusinessRejectReason_APPLICATION_NOT_AVAILABLE(4);
const int BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING(5);
const int BusinessRejectReason_NOT_AUTHORIZED(6);
const int BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME(7);
const size_t BusinessRejectReason_realm_els(8);
//-------------------------------------------------------------------------------------------------
using GrossTradeAmt = Field<Amt, 381>;
//-------------------------------------------------------------------------------------------------
using NoContraBrokers = Field<NumInGroup, 382>;
//-------------------------------------------------------------------------------------------------
using MaxMessageSize = Field<Length, 383>;
//-------------------------------------------------------------------------------------------------
using NoMsgTypes = Field<NumInGroup, 384>;
//-------------------------------------------------------------------------------------------------
using MsgDirection = Field<char, 385>;
const char MsgDirection_RECEIVE('R');
const char MsgDirection_SEND('S');
const size_t MsgDirection_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NoTradingSessions = Field<NumInGroup, 386>;
//-------------------------------------------------------------------------------------------------
using TotalVolumeTraded = Field<Qty, 387>;
//-------------------------------------------------------------------------------------------------
using DiscretionInst = Field<char, 388>;
const char DiscretionInst_RELATED_TO_DISPLAYED_PRICE('0');
const char DiscretionInst_RELATED_TO_MARKET_PRICE('1');
const char DiscretionInst_RELATED_TO_PRIMARY_PRICE('2');
const char DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE('3');
const char DiscretionInst_RELATED_TO_MIDPOINT_PRICE('4');
const char DiscretionInst_RELATED_TO_LAST_TRADE_PRICE('5');
const char DiscretionInst_RELATED_TO_VWAP('6');
const size_t DiscretionInst_realm_els(7);
//-------------------------------------------------------------------------------------------------
using DiscretionOffsetValue = Field<fp_type, 389>;
//-------------------------------------------------------------------------------------------------
using BidID = Field<f8String, 390>;
//-------------------------------------------------------------------------------------------------
using ClientBidID = Field<f8String, 391>;
//-------------------------------------------------------------------------------------------------
using ListName = Field<f8String, 392>;
//-------------------------------------------------------------------------------------------------
using TotNoRelatedSym = Field<int, 393>;
//-------------------------------------------------------------------------------------------------
using BidType = Field<int, 394>;
const int BidType_NON_DISCLOSED_STYLE(1);
const int BidType_DISCLOSED_STYLE(2);
const int BidType_NO_BIDDING_PROCESS(3);
const size_t BidType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using NumTickets = Field<int, 395>;
//-------------------------------------------------------------------------------------------------
using SideValue1 = Field<Amt, 396>;
//-------------------------------------------------------------------------------------------------
using SideValue2 = Field<Amt, 397>;
//-------------------------------------------------------------------------------------------------
using NoBidDescriptors = Field<NumInGroup, 398>;
//-------------------------------------------------------------------------------------------------
using BidDescriptorType = Field<int, 399>;
const int BidDescriptorType_SECTOR(1);
const int BidDescriptorType_COUNTRY(2);
const int BidDescriptorType_INDEX(3);
const size_t BidDescriptorType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using BidDescriptor = Field<f8String, 400>;
//-------------------------------------------------------------------------------------------------
using SideValueInd = Field<int, 401>;
const int SideValueInd_SIDEVALUE1(1);
const int SideValueInd_SIDEVALUE_2(2);
const size_t SideValueInd_realm_els(2);
//-------------------------------------------------------------------------------------------------
using LiquidityPctLow = Field<Percentage, 402>;
//-------------------------------------------------------------------------------------------------
using LiquidityPctHigh = Field<Percentage, 403>;
//-------------------------------------------------------------------------------------------------
using LiquidityValue = Field<Amt, 404>;
//-------------------------------------------------------------------------------------------------
using EFPTrackingError = Field<Percentage, 405>;
//-------------------------------------------------------------------------------------------------
using FairValue = Field<Amt, 406>;
//-------------------------------------------------------------------------------------------------
using OutsideIndexPct = Field<Percentage, 407>;
//-------------------------------------------------------------------------------------------------
using ValueOfFutures = Field<Amt, 408>;
//-------------------------------------------------------------------------------------------------
using LiquidityIndType = Field<int, 409>;
const int LiquidityIndType_5DAY_MOVING_AVERAGE(1);
const int LiquidityIndType_20_DAY_MOVING_AVERAGE(2);
const int LiquidityIndType_NORMAL_MARKET_SIZE(3);
const int LiquidityIndType_OTHER(4);
const size_t LiquidityIndType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using WtAverageLiquidity = Field<Percentage, 410>;
//-------------------------------------------------------------------------------------------------
using ExchangeForPhysical = Field<Boolean, 411>;
const char ExchangeForPhysical_NO('N');
const char ExchangeForPhysical_YES('Y');
const size_t ExchangeForPhysical_realm_els(2);
//-------------------------------------------------------------------------------------------------
using OutMainCntryUIndex = Field<Amt, 412>;
//-------------------------------------------------------------------------------------------------
using CrossPercent = Field<Percentage, 413>;
//-------------------------------------------------------------------------------------------------
using ProgRptReqs = Field<int, 414>;
const int ProgRptReqs_BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST(1);
const int ProgRptReqs_SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS_PERIOD_OPTIONALLY_SPECIFIED_IN_PROGRESSPERIOD(2);
const int ProgRptReqs_REAL_TIME_EXECUTION_REPORTS(3);
const size_t ProgRptReqs_realm_els(3);
//-------------------------------------------------------------------------------------------------
using ProgPeriodInterval = Field<int, 415>;
//-------------------------------------------------------------------------------------------------
using IncTaxInd = Field<int, 416>;
const int IncTaxInd_NET(1);
const int IncTaxInd_GROSS(2);
const size_t IncTaxInd_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NumBidders = Field<int, 417>;
//-------------------------------------------------------------------------------------------------
using BidTradeType = Field<char, 418>;
const char BidTradeType_AGENCY('A');
const char BidTradeType_VWAP_GUARANTEE('G');
const char BidTradeType_GUARANTEED_CLOSE('J');
const char BidTradeType_RISK_TRADE('R');
const size_t BidTradeType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using BasisPxType = Field<char, 419>;
const char BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION('2');
const char BasisPxType_CLOSING_PRICE('3');
const char BasisPxType_CURRENT_PRICE('4');
const char BasisPxType_SQ('5');
const char BasisPxType_VWAP_THROUGH_A_DAY('6');
const char BasisPxType_VWAP_THROUGH_A_MORNING_SESSION('7');
const char BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION('8');
const char BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT_YORI('9');
const char BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI('A');
const char BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI('B');
const char BasisPxType_STRIKE('C');
const char BasisPxType_OPEN('D');
const char BasisPxType_OTHERS('Z');
const size_t BasisPxType_realm_els(13);
//-------------------------------------------------------------------------------------------------
using NoBidComponents = Field<NumInGroup, 420>;
//-------------------------------------------------------------------------------------------------
using Country = Field<country, 421>;
//-------------------------------------------------------------------------------------------------
using TotNoStrikes = Field<int, 422>;
//-------------------------------------------------------------------------------------------------
using PriceType = Field<int, 423>;
const int PriceType_PERCENTAGE(1);
const int PriceType_PER_UNIT(2);
const int PriceType_FIXED_AMOUNT(3);
const int PriceType_DISCOUNT_PERCENTAGE_POINTS_BELOW_PAR(4);
const int PriceType_PREMIUM_PERCENTAGE_POINTS_OVER_PAR(5);
const int PriceType_SPREAD(6);
const int PriceType_TED_PRICE(7);
const int PriceType_TED_YIELD(8);
const int PriceType_YIELD(9);
const int PriceType_FIXED_CABINET_TRADE_PRICE(10);
const int PriceType_VARIABLE_CABINET_TRADE_PRICE(11);
const size_t PriceType_realm_els(11);
//-------------------------------------------------------------------------------------------------
using DayOrderQty = Field<Qty, 424>;
//-------------------------------------------------------------------------------------------------
using DayCumQty = Field<Qty, 425>;
//-------------------------------------------------------------------------------------------------
using DayAvgPx = Field<price, 426>;
//-------------------------------------------------------------------------------------------------
using GTBookingInst = Field<int, 427>;
const int GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION(0);
const int GTBookingInst_ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES(1);
const int GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE(2);
const size_t GTBookingInst_realm_els(3);
//-------------------------------------------------------------------------------------------------
using NoStrikes = Field<NumInGroup, 428>;
//-------------------------------------------------------------------------------------------------
using ListStatusType = Field<int, 429>;
const int ListStatusType_ACK(1);
const int ListStatusType_RESPONSE(2);
const int ListStatusType_TIMED(3);
const int ListStatusType_EXECSTARTED(4);
const int ListStatusType_ALLDONE(5);
const int ListStatusType_ALERT(6);
const size_t ListStatusType_realm_els(6);
//-------------------------------------------------------------------------------------------------
using NetGrossInd = Field<int, 430>;
const int NetGrossInd_NET(1);
const int NetGrossInd_GROSS(2);
const size_t NetGrossInd_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ListOrderStatus = Field<int, 431>;
const int ListOrderStatus_INBIDDINGPROCESS(1);
const int ListOrderStatus_RECEIVEDFOREXECUTION(2);
const int ListOrderStatus_EXECUTING(3);
const int ListOrderStatus_CANCELING(4);
const int ListOrderStatus_ALERT(5);
const int ListOrderStatus_ALL_DONE(6);
const int ListOrderStatus_REJECT(7);
const size_t ListOrderStatus_realm_els(7);
//-------------------------------------------------------------------------------------------------
using ExpireDate = Field<LocalMktDate, 432>;
//-------------------------------------------------------------------------------------------------
using ListExecInstType = Field<char, 433>;
const char ListExecInstType_IMMEDIATE('1');
const char ListExecInstType_WAIT_FOR_EXECUTE_INSTRUCTION('2');
const char ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN('3');
const char ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP('4');
const char ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW('5');
const size_t ListExecInstType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using CxlRejResponseTo = Field<char, 434>;
const char CxlRejResponseTo_ORDER_CANCEL_REQUEST('1');
const char CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST('2');
const size_t CxlRejResponseTo_realm_els(2);
//-------------------------------------------------------------------------------------------------
using UnderlyingCouponRate = Field<Percentage, 435>;
//-------------------------------------------------------------------------------------------------
using UnderlyingContractMultiplier = Field<fp_type, 436>;
//-------------------------------------------------------------------------------------------------
using ContraTradeQty = Field<Qty, 437>;
//-------------------------------------------------------------------------------------------------
using ContraTradeTime = Field<UTCTimestamp, 438>;
//-------------------------------------------------------------------------------------------------
using LiquidityNumSecurities = Field<int, 441>;
//-------------------------------------------------------------------------------------------------
using MultiLegReportingType = Field<char, 442>;
const char MultiLegReportingType_SINGLE_SECURITY('1');
const char MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY('2');
const char MultiLegReportingType_MULTI_LEG_SECURITY('3');
const size_t MultiLegReportingType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using StrikeTime = Field<UTCTimestamp, 443>;
//-------------------------------------------------------------------------------------------------
using ListStatusText = Field<f8String, 444>;
//-------------------------------------------------------------------------------------------------
using EncodedListStatusTextLen = Field<Length, 445>;
//-------------------------------------------------------------------------------------------------
using EncodedListStatusText = Field<data, 446>;
//-------------------------------------------------------------------------------------------------
using PartyIDSource = Field<char, 447>;
const char PartyIDSource_KOREAN_INVESTOR_ID('1');
const char PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII('2');
const char PartyIDSource_TAIWANESE_TRADING_ACCOUNT('3');
const char PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY('4');
const char PartyIDSource_CHINESE_B_SHARE('5');
const char PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER('6');
const char PartyIDSource_US_SOCIAL_SECURITY_NUMBER('7');
const char PartyIDSource_US_EMPLOYER_IDENTIFICATION_NUMBER('8');
const char PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER('9');
const char PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER('A');
const char PartyIDSource_BIC('B');
const char PartyIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER('C');
const char PartyIDSource_PROPRIETARY_CUSTOM_CODE('D');
const char PartyIDSource_ISO_COUNTRY_CODE('E');
const char PartyIDSource_SETTLEMENT_ENTITY_LOCATION('F');
const char PartyIDSource_MIC('G');
const char PartyIDSource_CSD_PARTICIPANT_MEMBER_CODE('H');
const char PartyIDSource_DIRECTED_BROKER_THREE_CHARACTER_ACRONYM_AS_DEFINED_IN_ISITC_ETC_BEST_PRACTICE_GUIDELINES_DOCUMENT('I');
const size_t PartyIDSource_realm_els(18);
//-------------------------------------------------------------------------------------------------
using PartyID = Field<f8String, 448>;
//-------------------------------------------------------------------------------------------------
using NetChgPrevDay = Field<PriceOffset, 451>;
//-------------------------------------------------------------------------------------------------
using PartyRole = Field<int, 452>;
const int PartyRole_EXECUTING_FIRM(1);
const int PartyRole_BROKER_OF_CREDIT(2);
const int PartyRole_CLIENT_ID(3);
const int PartyRole_CLEARING_FIRM(4);
const int PartyRole_INVESTOR_ID(5);
const int PartyRole_INTRODUCING_FIRM(6);
const int PartyRole_ENTERING_FIRM(7);
const int PartyRole_LOCATE_LENDING_FIRM(8);
const int PartyRole_FUND_MANAGER_CLIENT_ID(9);
const int PartyRole_SETTLEMENT_LOCATION(10);
const int PartyRole_ORDER_ORIGINATION_TRADER(11);
const int PartyRole_EXECUTING_TRADER(12);
const int PartyRole_ORDER_ORIGINATION_FIRM(13);
const int PartyRole_GIVEUP_CLEARING_FIRM(14);
const int PartyRole_CORRESPONDANT_CLEARING_FIRM(15);
const int PartyRole_EXECUTING_SYSTEM(16);
const int PartyRole_CONTRA_FIRM(17);
const int PartyRole_CONTRA_CLEARING_FIRM(18);
const int PartyRole_SPONSORING_FIRM(19);
const int PartyRole_UNDERLYING_CONTRA_FIRM(20);
const int PartyRole_CLEARING_ORGANIZATION(21);
const int PartyRole_EXCHANGE(22);
const int PartyRole_CUSTOMER_ACCOUNT(24);
const int PartyRole_CORRESPONDENT_CLEARING_ORGANIZATION(25);
const int PartyRole_CORRESPONDENT_BROKER(26);
const int PartyRole_BUYER_SELLER(27);
const int PartyRole_CUSTODIAN(28);
const int PartyRole_INTERMEDIARY(29);
const int PartyRole_AGENT(30);
const int PartyRole_SUB_CUSTODIAN(31);
const int PartyRole_BENEFICIARY(32);
const int PartyRole_INTERESTED_PARTY(33);
const int PartyRole_REGULATORY_BODY(34);
const int PartyRole_LIQUIDITY_PROVIDER(35);
const int PartyRole_ENTERING_TRADER(36);
const int PartyRole_CONTRA_TRADER(37);
const int PartyRole_POSITION_ACCOUNT(38);
const size_t PartyRole_realm_els(37);
//-------------------------------------------------------------------------------------------------
using NoPartyIDs = Field<NumInGroup, 453>;
//-------------------------------------------------------------------------------------------------
using NoSecurityAltID = Field<NumInGroup, 454>;
//-------------------------------------------------------------------------------------------------
using SecurityAltID = Field<f8String, 455>;
//-------------------------------------------------------------------------------------------------
using SecurityAltIDSource = Field<f8String, 456>;
//-------------------------------------------------------------------------------------------------
using NoUnderlyingSecurityAltID = Field<NumInGroup, 457>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityAltID = Field<f8String, 458>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityAltIDSource = Field<f8String, 459>;
//-------------------------------------------------------------------------------------------------
using Product = Field<int, 460>;
const int Product_AGENCY(1);
const int Product_COMMODITY(2);
const int Product_CORPORATE(3);
const int Product_CURRENCY(4);
const int Product_EQUITY(5);
const int Product_GOVERNMENT(6);
const int Product_INDEX(7);
const int Product_LOAN(8);
const int Product_MONEYMARKET(9);
const int Product_MORTGAGE(10);
const int Product_MUNICIPAL(11);
const int Product_OTHER(12);
const int Product_FINANCING(13);
const size_t Product_realm_els(13);
//-------------------------------------------------------------------------------------------------
using CFICode = Field<f8String, 461>;
//-------------------------------------------------------------------------------------------------
using UnderlyingProduct = Field<int, 462>;
//-------------------------------------------------------------------------------------------------
using UnderlyingCFICode = Field<f8String, 463>;
//-------------------------------------------------------------------------------------------------
using TestMessageIndicator = Field<Boolean, 464>;
const char TestMessageIndicator_NO('N');
const char TestMessageIndicator_YES('Y');
const size_t TestMessageIndicator_realm_els(2);
//-------------------------------------------------------------------------------------------------
using BookingRefID = Field<f8String, 466>;
//-------------------------------------------------------------------------------------------------
using IndividualAllocID = Field<f8String, 467>;
//-------------------------------------------------------------------------------------------------
using RoundingDirection = Field<char, 468>;
const char RoundingDirection_ROUND_TO_NEAREST('0');
const char RoundingDirection_ROUND_DOWN('1');
const char RoundingDirection_ROUND_UP('2');
const size_t RoundingDirection_realm_els(3);
//-------------------------------------------------------------------------------------------------
using RoundingModulus = Field<fp_type, 469>;
//-------------------------------------------------------------------------------------------------
using CountryOfIssue = Field<country, 470>;
//-------------------------------------------------------------------------------------------------
using StateOrProvinceOfIssue = Field<f8String, 471>;
//-------------------------------------------------------------------------------------------------
using LocaleOfIssue = Field<f8String, 472>;
//-------------------------------------------------------------------------------------------------
using NoRegistDtls = Field<NumInGroup, 473>;
//-------------------------------------------------------------------------------------------------
using MailingDtls = Field<f8String, 474>;
//-------------------------------------------------------------------------------------------------
using InvestorCountryOfResidence = Field<country, 475>;
//-------------------------------------------------------------------------------------------------
using PaymentRef = Field<f8String, 476>;
//-------------------------------------------------------------------------------------------------
using DistribPaymentMethod = Field<int, 477>;
const int DistribPaymentMethod_CREST(1);
const int DistribPaymentMethod_NSCC(2);
const int DistribPaymentMethod_EUROCLEAR(3);
const int DistribPaymentMethod_CLEARSTREAM(4);
const int DistribPaymentMethod_CHEQUE(5);
const int DistribPaymentMethod_TELEGRAPHIC_TRANSFER(6);
const int DistribPaymentMethod_FEDWIRE(7);
const int DistribPaymentMethod_DIRECT_CREDIT(8);
const int DistribPaymentMethod_ACH_CREDIT(9);
const int DistribPaymentMethod_BPAY(10);
const int DistribPaymentMethod_HIGH_VALUE_CLEARING_SYSTEM(11);
const int DistribPaymentMethod_REINVEST_IN_FUND(12);
const size_t DistribPaymentMethod_realm_els(12);
//-------------------------------------------------------------------------------------------------
using CashDistribCurr = Field<currency, 478>;
//-------------------------------------------------------------------------------------------------
using CommCurrency = Field<currency, 479>;
//-------------------------------------------------------------------------------------------------
using CancellationRights = Field<char, 480>;
const char CancellationRights_NO_WAIVER_AGREEMENT('M');
const char CancellationRights_NO_EXECUTION_ONLY('N');
const char CancellationRights_NO_INSTITUTIONAL('O');
const char CancellationRights_YES('Y');
const size_t CancellationRights_realm_els(4);
//-------------------------------------------------------------------------------------------------
using MoneyLaunderingStatus = Field<char, 481>;
const char MoneyLaunderingStatus_EXEMPT_BELOW_THE_LIMIT('1');
const char MoneyLaunderingStatus_EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION('2');
const char MoneyLaunderingStatus_EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION('3');
const char MoneyLaunderingStatus_NOT_CHECKED('N');
const char MoneyLaunderingStatus_PASSED('Y');
const size_t MoneyLaunderingStatus_realm_els(5);
//-------------------------------------------------------------------------------------------------
using MailingInst = Field<f8String, 482>;
//-------------------------------------------------------------------------------------------------
using TransBkdTime = Field<UTCTimestamp, 483>;
//-------------------------------------------------------------------------------------------------
using ExecPriceType = Field<char, 484>;
const char ExecPriceType_BID_PRICE('B');
const char ExecPriceType_CREATION_PRICE('C');
const char ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT('D');
const char ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT('E');
const char ExecPriceType_OFFER_PRICE('O');
const char ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT('P');
const char ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT('Q');
const char ExecPriceType_SINGLE_PRICE('S');
const size_t ExecPriceType_realm_els(8);
//-------------------------------------------------------------------------------------------------
using ExecPriceAdjustment = Field<fp_type, 485>;
//-------------------------------------------------------------------------------------------------
using DateOfBirth = Field<LocalMktDate, 486>;
//-------------------------------------------------------------------------------------------------
using TradeReportTransType = Field<int, 487>;
//-------------------------------------------------------------------------------------------------
using CardHolderName = Field<f8String, 488>;
//-------------------------------------------------------------------------------------------------
using CardNumber = Field<f8String, 489>;
//-------------------------------------------------------------------------------------------------
using CardExpDate = Field<LocalMktDate, 490>;
//-------------------------------------------------------------------------------------------------
using CardIssNum = Field<f8String, 491>;
//-------------------------------------------------------------------------------------------------
using PaymentMethod = Field<int, 492>;
const int PaymentMethod_CREST(1);
const int PaymentMethod_NSCC(2);
const int PaymentMethod_EUROCLEAR(3);
const int PaymentMethod_CLEARSTREAM(4);
const int PaymentMethod_CHEQUE(5);
const int PaymentMethod_TELEGRAPHIC_TRANSFER(6);
const int PaymentMethod_FEDWIRE(7);
const int PaymentMethod_DEBIT_CARD(8);
const int PaymentMethod_DIRECT_DEBIT(9);
const int PaymentMethod_DIRECT_CREDIT(10);
const int PaymentMethod_CREDIT_CARD(11);
const int PaymentMethod_ACH_DEBIT(12);
const int PaymentMethod_ACH_CREDIT(13);
const int PaymentMethod_BPAY(14);
const int PaymentMethod_HIGH_VALUE_CLEARING_SYSTEM(15);
const size_t PaymentMethod_realm_els(15);
//-------------------------------------------------------------------------------------------------
using RegistAcctType = Field<f8String, 493>;
//-------------------------------------------------------------------------------------------------
using Designation = Field<f8String, 494>;
//-------------------------------------------------------------------------------------------------
using TaxAdvantageType = Field<int, 495>;
const int TaxAdvantageType_NONE_NOT_APPLICABLE(0);
const int TaxAdvantageType_MAXI_ISA(1);
const int TaxAdvantageType_TESSA(2);
const int TaxAdvantageType_MINI_CASH_ISA(3);
const int TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA(4);
const int TaxAdvantageType_MINI_INSURANCE_ISA(5);
const int TaxAdvantageType_CURRENT_YEAR_PAYMENT(6);
const int TaxAdvantageType_PRIOR_YEAR_PAYMENT(7);
const int TaxAdvantageType_ASSET_TRANSFER(8);
const int TaxAdvantageType_EMPLOYEE(9);
const int TaxAdvantageType_EMPLOYEE_CURRENT_YEAR(10);
const int TaxAdvantageType_EMPLOYER(11);
const int TaxAdvantageType_EMPLOYER_CURRENT_YEAR(12);
const int TaxAdvantageType_NON_FUND_PROTOTYPE_IRA(13);
const int TaxAdvantageType_NON_FUND_QUALIFIED_PLAN(14);
const int TaxAdvantageType_DEFINED_CONTRIBUTION_PLAN(15);
const int TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT(16);
const int TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT_ROLLOVER(17);
const int TaxAdvantageType_KEOGH(18);
const int TaxAdvantageType_PROFIT_SHARING_PLAN(19);
const int TaxAdvantageType_401K(20);
const int TaxAdvantageType_SELF_DIRECTED_IRA(21);
const int TaxAdvantageType_403(22);
const int TaxAdvantageType_457(23);
const int TaxAdvantageType_ROTH_IRA_24(24);
const int TaxAdvantageType_ROTH_IRA_25(25);
const int TaxAdvantageType_ROTH_CONVERSION_IRA_26(26);
const int TaxAdvantageType_ROTH_CONVERSION_IRA_27(27);
const int TaxAdvantageType_EDUCATION_IRA_28(28);
const int TaxAdvantageType_EDUCATION_IRA_29(29);
const size_t TaxAdvantageType_realm_els(30);
//-------------------------------------------------------------------------------------------------
using RegistRejReasonText = Field<f8String, 496>;
//-------------------------------------------------------------------------------------------------
using FundRenewWaiv = Field<char, 497>;
const char FundRenewWaiv_NO('N');
const char FundRenewWaiv_YES('Y');
const size_t FundRenewWaiv_realm_els(2);
//-------------------------------------------------------------------------------------------------
using CashDistribAgentName = Field<f8String, 498>;
//-------------------------------------------------------------------------------------------------
using CashDistribAgentCode = Field<f8String, 499>;
//-------------------------------------------------------------------------------------------------
using CashDistribAgentAcctNumber = Field<f8String, 500>;
//-------------------------------------------------------------------------------------------------
using CashDistribPayRef = Field<f8String, 501>;
//-------------------------------------------------------------------------------------------------
using CashDistribAgentAcctName = Field<f8String, 502>;
//-------------------------------------------------------------------------------------------------
using CardStartDate = Field<LocalMktDate, 503>;
//-------------------------------------------------------------------------------------------------
using PaymentDate = Field<LocalMktDate, 504>;
//-------------------------------------------------------------------------------------------------
using PaymentRemitterID = Field<f8String, 505>;
//-------------------------------------------------------------------------------------------------
using RegistStatus = Field<char, 506>;
const char RegistStatus_ACCEPTED('A');
const char RegistStatus_HELD('H');
const char RegistStatus_REMINDER_IE_REGISTRATION_INSTRUCTIONS_ARE_STILL_OUTSTANDING('N');
const char RegistStatus_REJECTED('R');
const size_t RegistStatus_realm_els(4);
//-------------------------------------------------------------------------------------------------
using RegistRejReasonCode = Field<int, 507>;
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_ACCOUNT_TYPE(1);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE(2);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_OWNERSHIP_TYPE(3);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETLS(4);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_SEQ_NO(5);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DTLS(6);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DTLS(7);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INST(8);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID(9);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE(10);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_DATE_OF_BIRTH(11);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE(12);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_NODISTRIBINSTNS(13);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE(14);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD(15);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME(16);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE(17);
const int RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM(18);
const int RegistRejReasonCode_OTHER(99);
const size_t RegistRejReasonCode_realm_els(19);
//-------------------------------------------------------------------------------------------------
using RegistRefID = Field<f8String, 508>;
//-------------------------------------------------------------------------------------------------
using RegistDtls = Field<f8String, 509>;
//-------------------------------------------------------------------------------------------------
using NoDistribInsts = Field<NumInGroup, 510>;
//-------------------------------------------------------------------------------------------------
using RegistEmail = Field<f8String, 511>;
//-------------------------------------------------------------------------------------------------
using DistribPercentage = Field<Percentage, 512>;
//-------------------------------------------------------------------------------------------------
using RegistID = Field<f8String, 513>;
//-------------------------------------------------------------------------------------------------
using RegistTransType = Field<char, 514>;
const char RegistTransType_NEW('0');
const char RegistTransType_REPLACE('1');
const char RegistTransType_CANCEL('2');
const size_t RegistTransType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using ExecValuationPoint = Field<UTCTimestamp, 515>;
//-------------------------------------------------------------------------------------------------
using OrderPercent = Field<Percentage, 516>;
//-------------------------------------------------------------------------------------------------
using OwnershipType = Field<char, 517>;
const char OwnershipType_JOINT_TRUSTEES('2');
const char OwnershipType_JOINT_INVESTORS('J');
const char OwnershipType_TENANTS_IN_COMMON('T');
const size_t OwnershipType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using NoContAmts = Field<NumInGroup, 518>;
//-------------------------------------------------------------------------------------------------
using ContAmtType = Field<int, 519>;
const int ContAmtType_COMMISSION_AMOUNT(1);
const int ContAmtType_COMMISSION(2);
const int ContAmtType_INITIAL_CHARGE_AMOUNT(3);
const int ContAmtType_INITIAL_CHARGE(4);
const int ContAmtType_DISCOUNT_AMOUNT(5);
const int ContAmtType_DISCOUNT(6);
const int ContAmtType_DILUTION_LEVY_AMOUNT(7);
const int ContAmtType_DILUTION_LEVY(8);
const int ContAmtType_EXIT_CHARGE_AMOUNT(9);
const int ContAmtType_EXIT_CHARGE(10);
const int ContAmtType_FUND_BASED_RENEWAL_COMMISSION(11);
const int ContAmtType_PROJECTED_FUND_VALUE(12);
const int ContAmtType_FUND_BASED_RENEWAL_COMMISSION_AMOUNT_13(13);
const int ContAmtType_FUND_BASED_RENEWAL_COMMISSION_AMOUNT_14(14);
const int ContAmtType_NET_SETTLEMENT_AMOUNT(15);
const size_t ContAmtType_realm_els(15);
//-------------------------------------------------------------------------------------------------
using ContAmtValue = Field<fp_type, 520>;
//-------------------------------------------------------------------------------------------------
using ContAmtCurr = Field<currency, 521>;
//-------------------------------------------------------------------------------------------------
using OwnerType = Field<int, 522>;
const int OwnerType_INDIVIDUAL_INVESTOR(1);
const int OwnerType_PUBLIC_COMPANY(2);
const int OwnerType_PRIVATE_COMPANY(3);
const int OwnerType_INDIVIDUAL_TRUSTEE(4);
const int OwnerType_COMPANY_TRUSTEE(5);
const int OwnerType_PENSION_PLAN(6);
const int OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT(7);
const int OwnerType_TRUSTS(8);
const int OwnerType_FIDUCIARIES(9);
const int OwnerType_NETWORKING_SUB_ACCOUNT(10);
const int OwnerType_NON_PROFIT_ORGANIZATION(11);
const int OwnerType_CORPORATE_BODY(12);
const int OwnerType_NOMINEE(13);
const size_t OwnerType_realm_els(13);
//-------------------------------------------------------------------------------------------------
using PartySubID = Field<f8String, 523>;
//-------------------------------------------------------------------------------------------------
using NestedPartyID = Field<f8String, 524>;
//-------------------------------------------------------------------------------------------------
using NestedPartyIDSource = Field<char, 525>;
//-------------------------------------------------------------------------------------------------
using SecondaryClOrdID = Field<f8String, 526>;
//-------------------------------------------------------------------------------------------------
using SecondaryExecID = Field<f8String, 527>;
//-------------------------------------------------------------------------------------------------
using OrderCapacity = Field<char, 528>;
const char OrderCapacity_AGENCY('A');
const char OrderCapacity_PROPRIETARY('G');
const char OrderCapacity_INDIVIDUAL('I');
const char OrderCapacity_PRINCIPAL('P');
const char OrderCapacity_RISKLESS_PRINCIPAL('R');
const char OrderCapacity_AGENT_FOR_OTHER_MEMBER('W');
const size_t OrderCapacity_realm_els(6);
//-------------------------------------------------------------------------------------------------
using OrderRestrictions = Field<MultipleStringValue, 529>;
const f8String OrderRestrictions_PROGRAM_TRADE("1");
const f8String OrderRestrictions_INDEX_ARBITRAGE("2");
const f8String OrderRestrictions_NON_INDEX_ARBITRAGE("3");
const f8String OrderRestrictions_COMPETING_MARKET_MAKER("4");
const f8String OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY("5");
const f8String OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY("6");
const f8String OrderRestrictions_FOREIGN_ENTITY("7");
const f8String OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT("8");
const f8String OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE("9");
const f8String OrderRestrictions_RISKLESS_ARBITRAGE("A");
const size_t OrderRestrictions_realm_els(10);
//-------------------------------------------------------------------------------------------------
using MassCancelRequestType = Field<char, 530>;
const char MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY('1');
const char MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY('2');
const char MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT('3');
const char MassCancelRequestType_CANCEL_ORDERS_FOR_A_CFICODE('4');
const char MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITYTYPE('5');
const char MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION('6');
const char MassCancelRequestType_CANCEL_ALL_ORDERS('7');
const size_t MassCancelRequestType_realm_els(7);
//-------------------------------------------------------------------------------------------------
using MassCancelResponse = Field<char, 531>;
const char MassCancelResponse_CANCEL_REQUEST_REJECTED('0');
const char MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY('1');
const char MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY('2');
const char MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT('3');
const char MassCancelResponse_CANCEL_ORDERS_FOR_A_CFICODE('4');
const char MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITYTYPE('5');
const char MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION('6');
const char MassCancelResponse_CANCEL_ALL_ORDERS('7');
const size_t MassCancelResponse_realm_els(8);
//-------------------------------------------------------------------------------------------------
using MassCancelRejectReason = Field<char, 532>;
const char MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED('0');
const char MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY('1');
const char MassCancelRejectReason_INVALID_OR_UNKNOWN_UNDERLYING('2');
const char MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT('3');
const char MassCancelRejectReason_INVALID_OR_UNKNOWN_CFICODE('4');
const char MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE('5');
const char MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION('6');
const char MassCancelRejectReason_OTHER('9');
const size_t MassCancelRejectReason_realm_els(8);
//-------------------------------------------------------------------------------------------------
using TotalAffectedOrders = Field<int, 533>;
//-------------------------------------------------------------------------------------------------
using NoAffectedOrders = Field<NumInGroup, 534>;
//-------------------------------------------------------------------------------------------------
using AffectedOrderID = Field<f8String, 535>;
//-------------------------------------------------------------------------------------------------
using AffectedSecondaryOrderID = Field<f8String, 536>;
//-------------------------------------------------------------------------------------------------
using QuoteType = Field<int, 537>;
const int QuoteType_INDICATIVE(0);
const int QuoteType_TRADEABLE(1);
const int QuoteType_RESTRICTED_TRADEABLE(2);
const int QuoteType_COUNTER(3);
const size_t QuoteType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using NestedPartyRole = Field<int, 538>;
//-------------------------------------------------------------------------------------------------
using NoNestedPartyIDs = Field<NumInGroup, 539>;
//-------------------------------------------------------------------------------------------------
using TotalAccruedInterestAmt = Field<Amt, 540>;
//-------------------------------------------------------------------------------------------------
using MaturityDate = Field<LocalMktDate, 541>;
//-------------------------------------------------------------------------------------------------
using UnderlyingMaturityDate = Field<LocalMktDate, 542>;
//-------------------------------------------------------------------------------------------------
using InstrRegistry = Field<f8String, 543>;
//-------------------------------------------------------------------------------------------------
using CashMargin = Field<char, 544>;
const char CashMargin_CASH('1');
const char CashMargin_MARGIN_OPEN('2');
const char CashMargin_MARGIN_CLOSE('3');
const size_t CashMargin_realm_els(3);
//-------------------------------------------------------------------------------------------------
using NestedPartySubID = Field<f8String, 545>;
//-------------------------------------------------------------------------------------------------
using Scope = Field<MultipleStringValue, 546>;
const f8String Scope_LOCAL("1");
const f8String Scope_NATIONAL("2");
const f8String Scope_GLOBAL("3");
const size_t Scope_realm_els(3);
//-------------------------------------------------------------------------------------------------
using MDImplicitDelete = Field<Boolean, 547>;
const char MDImplicitDelete_NO('N');
const char MDImplicitDelete_YES('Y');
const size_t MDImplicitDelete_realm_els(2);
//-------------------------------------------------------------------------------------------------
using CrossID = Field<f8String, 548>;
//-------------------------------------------------------------------------------------------------
using CrossType = Field<int, 549>;
const int CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT_BOTH_SIDES_ARE_TREATED_IN_THE_SAME_MANNER_THIS_IS_EQUIVALENT_TO_AN_ALL_OR_NONE(1);
const int CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED_ONE_SIDE_IS_FULLY_EXECUTED_THE_OTHER_SIDE_IS_PARTIALLY_EXECUTED_WITH_THE_REMAINDER_BEING_CANCELLED_THIS_IS_EQUIVALENT_TO_AN_IMMEDIATE_OR_CANCEL_ON_THE_OTHER_SIDE_NOTE_THE_CROSSPRIORITZATION(2);
const int CrossType_CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE_ONE_SIDE_OF_THE_CROSS_IS_FULLY_EXECUTED(3);
const int CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE_IN_THE_CASE_OTHER_ORDERS_EXIST_WITH_THE_SAME_PRICE_THE_QUANTITY_OF_THE_CROSS_IS_EXECUTED_AGAINST_THE_EXISTING_ORDERS_AND_QUOTES_THE_REMAINDER_OF_THE_CROSS_IS_EXECUTED_AGAINST_THE_OTHER_SIDE_OF_THE_CROSS_THE_TWO_SIDES_POTENTIALLY_HAVE_DIFFERENT_QUANTITIES(4);
const size_t CrossType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using CrossPrioritization = Field<int, 550>;
const int CrossPrioritization_NONE(0);
const int CrossPrioritization_BUY_SIDE_IS_PRIORITIZED(1);
const int CrossPrioritization_SELL_SIDE_IS_PRIORITIZED(2);
const size_t CrossPrioritization_realm_els(3);
//-------------------------------------------------------------------------------------------------
using OrigCrossID = Field<f8String, 551>;
//-------------------------------------------------------------------------------------------------
using NoSides = Field<NumInGroup, 552>;
const int NoSides_ONE_SIDE(1);
const int NoSides_BOTH_SIDES(2);
const size_t NoSides_realm_els(2);
//-------------------------------------------------------------------------------------------------
using Username = Field<f8String, 553>;
//-------------------------------------------------------------------------------------------------
using Password = Field<f8String, 554>;
//-------------------------------------------------------------------------------------------------
using NoLegs = Field<NumInGroup, 555>;
//-------------------------------------------------------------------------------------------------
using LegCurrency = Field<currency, 556>;
//-------------------------------------------------------------------------------------------------
using TotNoSecurityTypes = Field<int, 557>;
//-------------------------------------------------------------------------------------------------
using NoSecurityTypes = Field<NumInGroup, 558>;
//-------------------------------------------------------------------------------------------------
using SecurityListRequestType = Field<int, 559>;
const int SecurityListRequestType_SYMBOL(0);
const int SecurityListRequestType_SECURITYTYPE_AND_OR_CFICODE(1);
const int SecurityListRequestType_PRODUCT(2);
const int SecurityListRequestType_TRADINGSESSIONID(3);
const int SecurityListRequestType_ALL_SECURITIES(4);
const size_t SecurityListRequestType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using SecurityRequestResult = Field<int, 560>;
const int SecurityRequestResult_VALID_REQUEST(0);
const int SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST(1);
const int SecurityRequestResult_NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA(2);
const int SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA(3);
const int SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE(4);
const int SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED(5);
const size_t SecurityRequestResult_realm_els(6);
//-------------------------------------------------------------------------------------------------
using RoundLot = Field<Qty, 561>;
//-------------------------------------------------------------------------------------------------
using MinTradeVol = Field<Qty, 562>;
//-------------------------------------------------------------------------------------------------
using MultiLegRptTypeReq = Field<int, 563>;
const int MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY(0);
const int MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY(1);
const int MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY(2);
const size_t MultiLegRptTypeReq_realm_els(3);
//-------------------------------------------------------------------------------------------------
using LegPositionEffect = Field<char, 564>;
//-------------------------------------------------------------------------------------------------
using LegCoveredOrUncovered = Field<int, 565>;
//-------------------------------------------------------------------------------------------------
using LegPrice = Field<price, 566>;
//-------------------------------------------------------------------------------------------------
using TradSesStatusRejReason = Field<int, 567>;
const int TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADINGSESSIONID(1);
const int TradSesStatusRejReason_OTHER(99);
const size_t TradSesStatusRejReason_realm_els(2);
//-------------------------------------------------------------------------------------------------
using TradeRequestID = Field<f8String, 568>;
//-------------------------------------------------------------------------------------------------
using TradeRequestType = Field<int, 569>;
const int TradeRequestType_ALL_TRADES(0);
const int TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST(1);
const int TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA(2);
const int TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA(3);
const int TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA(4);
const size_t TradeRequestType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using PreviouslyReported = Field<Boolean, 570>;
const char PreviouslyReported_NO('N');
const char PreviouslyReported_YES('Y');
const size_t PreviouslyReported_realm_els(2);
//-------------------------------------------------------------------------------------------------
using TradeReportID = Field<f8String, 571>;
//-------------------------------------------------------------------------------------------------
using TradeReportRefID = Field<f8String, 572>;
//-------------------------------------------------------------------------------------------------
using MatchStatus = Field<char, 573>;
const char MatchStatus_COMPARED_MATCHED_OR_AFFIRMED('0');
const char MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRMED('1');
const char MatchStatus_ADVISORY_OR_ALERT('2');
const size_t MatchStatus_realm_els(3);
//-------------------------------------------------------------------------------------------------
using MatchType = Field<f8String, 574>;
const f8String MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES_AND_EXECUTION_TIME("A1");
const f8String MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES("A2");
const f8String MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES_AND_EXECUTION_TIME("A3");
const f8String MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES("A4");
const f8String MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME("A5");
const f8String MatchType_COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS_PAIR_OFFS("AQ");
const f8String MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_MINUS_BADGES_AND_TIMES_ACT_M1_MATCH("M1");
const f8String MatchType_SUMMARIZED_MATCH_MINUS_BADGES_AND_TIMES_ACT_M2_MATCH("M2");
const f8String MatchType_ACT_ACCEPTED_TRADE("M3");
const f8String MatchType_ACT_DEFAULT_TRADE("M4");
const f8String MatchType_ACT_DEFAULT_AFTER_M2("M5");
const f8String MatchType_ACT_M6_MATCH("M6");
const f8String MatchType_OCS_LOCKED_IN_NON_ACT("MT");
const f8String MatchType_SUMMARIZED_MATCH_USING_A1_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED("S1");
const f8String MatchType_SUMMARIZED_MATCH_USING_A2_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED("S2");
const f8String MatchType_SUMMARIZED_MATCH_USING_A3_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED("S3");
const f8String MatchType_SUMMARIZED_MATCH_USING_A4_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED("S4");
const f8String MatchType_SUMMARIZED_MATCH_USING_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED("S5");
const size_t MatchType_realm_els(18);
//-------------------------------------------------------------------------------------------------
using OddLot = Field<Boolean, 575>;
const char OddLot_NO('N');
const char OddLot_YES('Y');
const size_t OddLot_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NoClearingInstructions = Field<NumInGroup, 576>;
//-------------------------------------------------------------------------------------------------
using ClearingInstruction = Field<int, 577>;
const int ClearingInstruction_PROCESS_NORMALLY(0);
const int ClearingInstruction_EXCLUDE_FROM_ALL_NETTING(1);
const int ClearingInstruction_BILATERAL_NETTING_ONLY(2);
const int ClearingInstruction_EX_CLEARING(3);
const int ClearingInstruction_SPECIAL_TRADE(4);
const int ClearingInstruction_MULTILATERAL_NETTING(5);
const int ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY(6);
const int ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY(7);
const int ClearingInstruction_MANUAL_MODE(8);
const int ClearingInstruction_AUTOMATIC_POSTING_MODE(9);
const int ClearingInstruction_AUTOMATIC_GIVE_UP_MODE(10);
const int ClearingInstruction_QUALIFIED_SERVICE_REPRESENTATIVE(11);
const int ClearingInstruction_CUSTOMER_TRADE(12);
const int ClearingInstruction_SELF_CLEARING(13);
const size_t ClearingInstruction_realm_els(14);
//-------------------------------------------------------------------------------------------------
using TradeInputSource = Field<f8String, 578>;
//-------------------------------------------------------------------------------------------------
using TradeInputDevice = Field<f8String, 579>;
//-------------------------------------------------------------------------------------------------
using NoDates = Field<NumInGroup, 580>;
//-------------------------------------------------------------------------------------------------
using AccountType = Field<int, 581>;
const int AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS(1);
const int AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS(2);
const int AccountType_HOUSE_TRADER(3);
const int AccountType_FLOOR_TRADER(4);
const int AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED(6);
const int AccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED(7);
const int AccountType_JOINT_BACKOFFICE_ACCOUNT(8);
const size_t AccountType_realm_els(7);
//-------------------------------------------------------------------------------------------------
using CustOrderCapacity = Field<int, 582>;
const int CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT(1);
const int CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT(2);
const int CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER(3);
const int CustOrderCapacity_ALL_OTHER(4);
const size_t CustOrderCapacity_realm_els(4);
//-------------------------------------------------------------------------------------------------
using ClOrdLinkID = Field<f8String, 583>;
//-------------------------------------------------------------------------------------------------
using MassStatusReqID = Field<f8String, 584>;
//-------------------------------------------------------------------------------------------------
using MassStatusReqType = Field<int, 585>;
const int MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY(1);
const int MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY(2);
const int MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT(3);
const int MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_CFICODE(4);
const int MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE(5);
const int MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION(6);
const int MassStatusReqType_STATUS_FOR_ALL_ORDERS(7);
const int MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTYID(8);
const size_t MassStatusReqType_realm_els(8);
//-------------------------------------------------------------------------------------------------
using OrigOrdModTime = Field<UTCTimestamp, 586>;
//-------------------------------------------------------------------------------------------------
using LegSettlType = Field<char, 587>;
//-------------------------------------------------------------------------------------------------
using LegSettlDate = Field<LocalMktDate, 588>;
//-------------------------------------------------------------------------------------------------
using DayBookingInst = Field<char, 589>;
const char DayBookingInst_CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR('0');
const char DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING('1');
const char DayBookingInst_ACCUMULATE('2');
const size_t DayBookingInst_realm_els(3);
//-------------------------------------------------------------------------------------------------
using BookingUnit = Field<char, 590>;
const char BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT('0');
const char BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER('1');
const char BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE('2');
const size_t BookingUnit_realm_els(3);
//-------------------------------------------------------------------------------------------------
using PreallocMethod = Field<char, 591>;
const char PreallocMethod_PRO_RATA('0');
const char PreallocMethod_DO_NOT_PRO_RATA_DISCUSS_FIRST('1');
const size_t PreallocMethod_realm_els(2);
//-------------------------------------------------------------------------------------------------
using UnderlyingCountryOfIssue = Field<country, 592>;
//-------------------------------------------------------------------------------------------------
using UnderlyingStateOrProvinceOfIssue = Field<f8String, 593>;
//-------------------------------------------------------------------------------------------------
using UnderlyingLocaleOfIssue = Field<f8String, 594>;
//-------------------------------------------------------------------------------------------------
using UnderlyingInstrRegistry = Field<f8String, 595>;
//-------------------------------------------------------------------------------------------------
using LegCountryOfIssue = Field<country, 596>;
//-------------------------------------------------------------------------------------------------
using LegStateOrProvinceOfIssue = Field<f8String, 597>;
//-------------------------------------------------------------------------------------------------
using LegLocaleOfIssue = Field<f8String, 598>;
//-------------------------------------------------------------------------------------------------
using LegInstrRegistry = Field<f8String, 599>;
//-------------------------------------------------------------------------------------------------
using LegSymbol = Field<f8String, 600>;
//-------------------------------------------------------------------------------------------------
using LegSymbolSfx = Field<f8String, 601>;
//-------------------------------------------------------------------------------------------------
using LegSecurityID = Field<f8String, 602>;
//-------------------------------------------------------------------------------------------------
using LegSecurityIDSource = Field<f8String, 603>;
//-------------------------------------------------------------------------------------------------
using NoLegSecurityAltID = Field<NumInGroup, 604>;
//-------------------------------------------------------------------------------------------------
using LegSecurityAltID = Field<f8String, 605>;
//-------------------------------------------------------------------------------------------------
using LegSecurityAltIDSource = Field<f8String, 606>;
//-------------------------------------------------------------------------------------------------
using LegProduct = Field<int, 607>;
//-------------------------------------------------------------------------------------------------
using LegCFICode = Field<f8String, 608>;
//-------------------------------------------------------------------------------------------------
using LegSecurityType = Field<f8String, 609>;
//-------------------------------------------------------------------------------------------------
using LegMaturityMonthYear = Field<MonthYear, 610>;
//-------------------------------------------------------------------------------------------------
using LegMaturityDate = Field<LocalMktDate, 611>;
//-------------------------------------------------------------------------------------------------
using LegStrikePrice = Field<price, 612>;
//-------------------------------------------------------------------------------------------------
using LegOptAttribute = Field<char, 613>;
//-------------------------------------------------------------------------------------------------
using LegContractMultiplier = Field<fp_type, 614>;
//-------------------------------------------------------------------------------------------------
using LegCouponRate = Field<Percentage, 615>;
//-------------------------------------------------------------------------------------------------
using LegSecurityExchange = Field<Exchange, 616>;
//-------------------------------------------------------------------------------------------------
using LegIssuer = Field<f8String, 617>;
//-------------------------------------------------------------------------------------------------
using EncodedLegIssuerLen = Field<Length, 618>;
//-------------------------------------------------------------------------------------------------
using EncodedLegIssuer = Field<data, 619>;
//-------------------------------------------------------------------------------------------------
using LegSecurityDesc = Field<f8String, 620>;
//-------------------------------------------------------------------------------------------------
using EncodedLegSecurityDescLen = Field<Length, 621>;
//-------------------------------------------------------------------------------------------------
using EncodedLegSecurityDesc = Field<data, 622>;
//-------------------------------------------------------------------------------------------------
using LegRatioQty = Field<fp_type, 623>;
//-------------------------------------------------------------------------------------------------
using LegSide = Field<char, 624>;
//-------------------------------------------------------------------------------------------------
using TradingSessionSubID = Field<f8String, 625>;
//-------------------------------------------------------------------------------------------------
using AllocType = Field<int, 626>;
const int AllocType_CALCULATED(1);
const int AllocType_PRELIMINARY(2);
const int AllocType_READY_TO_BOOK(5);
const int AllocType_WAREHOUSE_INSTRUCTION(7);
const int AllocType_REQUEST_TO_INTERMEDIARY(8);
const size_t AllocType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using NoHops = Field<NumInGroup, 627>;
//-------------------------------------------------------------------------------------------------
using HopCompID = Field<f8String, 628>;
//-------------------------------------------------------------------------------------------------
using HopSendingTime = Field<UTCTimestamp, 629>;
//-------------------------------------------------------------------------------------------------
using HopRefID = Field<SeqNum, 630>;
//-------------------------------------------------------------------------------------------------
using MidPx = Field<price, 631>;
//-------------------------------------------------------------------------------------------------
using BidYield = Field<Percentage, 632>;
//-------------------------------------------------------------------------------------------------
using MidYield = Field<Percentage, 633>;
//-------------------------------------------------------------------------------------------------
using OfferYield = Field<Percentage, 634>;
//-------------------------------------------------------------------------------------------------
using ClearingFeeIndicator = Field<f8String, 635>;
const f8String ClearingFeeIndicator_1ST_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT("1");
const f8String ClearingFeeIndicator_2ND_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT("2");
const f8String ClearingFeeIndicator_3RD_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT("3");
const f8String ClearingFeeIndicator_4TH_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT("4");
const f8String ClearingFeeIndicator_5TH_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT("5");
const f8String ClearingFeeIndicator_6TH_YEAR_AND_BEYOND_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT("9");
const f8String ClearingFeeIndicator_CBOE_MEMBER("B");
const f8String ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER("C");
const f8String ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER("E");
const f8String ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS("F");
const f8String ClearingFeeIndicator_106H_AND_106J_FIRMS("H");
const f8String ClearingFeeIndicator_GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS("I");
const f8String ClearingFeeIndicator_LESSEE_AND_106F_EMPLOYEES("L");
const f8String ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES("M");
const size_t ClearingFeeIndicator_realm_els(14);
//-------------------------------------------------------------------------------------------------
using WorkingIndicator = Field<Boolean, 636>;
const char WorkingIndicator_NO('N');
const char WorkingIndicator_YES('Y');
const size_t WorkingIndicator_realm_els(2);
//-------------------------------------------------------------------------------------------------
using LegLastPx = Field<price, 637>;
//-------------------------------------------------------------------------------------------------
using PriorityIndicator = Field<int, 638>;
const int PriorityIndicator_PRIORITY_UNCHANGED(0);
const int PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE(1);
const size_t PriorityIndicator_realm_els(2);
//-------------------------------------------------------------------------------------------------
using PriceImprovement = Field<PriceOffset, 639>;
//-------------------------------------------------------------------------------------------------
using Price2 = Field<price, 640>;
//-------------------------------------------------------------------------------------------------
using LastForwardPoints2 = Field<PriceOffset, 641>;
//-------------------------------------------------------------------------------------------------
using BidForwardPoints2 = Field<PriceOffset, 642>;
//-------------------------------------------------------------------------------------------------
using OfferForwardPoints2 = Field<PriceOffset, 643>;
//-------------------------------------------------------------------------------------------------
using RFQReqID = Field<f8String, 644>;
//-------------------------------------------------------------------------------------------------
using MktBidPx = Field<price, 645>;
//-------------------------------------------------------------------------------------------------
using MktOfferPx = Field<price, 646>;
//-------------------------------------------------------------------------------------------------
using MinBidSize = Field<Qty, 647>;
//-------------------------------------------------------------------------------------------------
using MinOfferSize = Field<Qty, 648>;
//-------------------------------------------------------------------------------------------------
using QuoteStatusReqID = Field<f8String, 649>;
//-------------------------------------------------------------------------------------------------
using LegalConfirm = Field<Boolean, 650>;
const char LegalConfirm_NO('N');
const char LegalConfirm_YES('Y');
const size_t LegalConfirm_realm_els(2);
//-------------------------------------------------------------------------------------------------
using UnderlyingLastPx = Field<price, 651>;
//-------------------------------------------------------------------------------------------------
using UnderlyingLastQty = Field<Qty, 652>;
//-------------------------------------------------------------------------------------------------
using LegRefID = Field<f8String, 654>;
//-------------------------------------------------------------------------------------------------
using ContraLegRefID = Field<f8String, 655>;
//-------------------------------------------------------------------------------------------------
using SettlCurrBidFxRate = Field<fp_type, 656>;
//-------------------------------------------------------------------------------------------------
using SettlCurrOfferFxRate = Field<fp_type, 657>;
//-------------------------------------------------------------------------------------------------
using QuoteRequestRejectReason = Field<int, 658>;
const int QuoteRequestRejectReason_UNKNOWN_SYMBOL(1);
const int QuoteRequestRejectReason_EXCHANGE(2);
const int QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT(3);
const int QuoteRequestRejectReason_TOO_LATE_TO_ENTER(4);
const int QuoteRequestRejectReason_INVALID_PRICE(5);
const int QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE(6);
const int QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY(7);
const int QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT(8);
const int QuoteRequestRejectReason_NO_INVENTORY(9);
const int QuoteRequestRejectReason_PASS(10);
const int QuoteRequestRejectReason_OTHER(99);
const size_t QuoteRequestRejectReason_realm_els(11);
//-------------------------------------------------------------------------------------------------
using SideComplianceID = Field<f8String, 659>;
//-------------------------------------------------------------------------------------------------
using AcctIDSource = Field<int, 660>;
const int AcctIDSource_BIC(1);
const int AcctIDSource_SID_CODE(2);
const int AcctIDSource_TFM(3);
const int AcctIDSource_OMGEO(4);
const int AcctIDSource_DTCC_CODE(5);
const int AcctIDSource_OTHER(99);
const size_t AcctIDSource_realm_els(6);
//-------------------------------------------------------------------------------------------------
using AllocAcctIDSource = Field<int, 661>;
//-------------------------------------------------------------------------------------------------
using BenchmarkPrice = Field<price, 662>;
//-------------------------------------------------------------------------------------------------
using BenchmarkPriceType = Field<int, 663>;
//-------------------------------------------------------------------------------------------------
using ConfirmID = Field<f8String, 664>;
//-------------------------------------------------------------------------------------------------
using ConfirmStatus = Field<int, 665>;
const int ConfirmStatus_RECEIVED(1);
const int ConfirmStatus_MISMATCHED_ACCOUNT(2);
const int ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS(3);
const int ConfirmStatus_CONFIRMED(4);
const int ConfirmStatus_REQUEST_REJECTED(5);
const size_t ConfirmStatus_realm_els(5);
//-------------------------------------------------------------------------------------------------
using ConfirmTransType = Field<int, 666>;
const int ConfirmTransType_NEW(0);
const int ConfirmTransType_REPLACE(1);
const int ConfirmTransType_CANCEL(2);
const size_t ConfirmTransType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using ContractSettlMonth = Field<MonthYear, 667>;
//-------------------------------------------------------------------------------------------------
using DeliveryForm = Field<int, 668>;
const int DeliveryForm_BOOKENTRY(1);
const int DeliveryForm_BEARER(2);
const size_t DeliveryForm_realm_els(2);
//-------------------------------------------------------------------------------------------------
using LastParPx = Field<price, 669>;
//-------------------------------------------------------------------------------------------------
using NoLegAllocs = Field<NumInGroup, 670>;
//-------------------------------------------------------------------------------------------------
using LegAllocAccount = Field<f8String, 671>;
//-------------------------------------------------------------------------------------------------
using LegIndividualAllocID = Field<f8String, 672>;
//-------------------------------------------------------------------------------------------------
using LegAllocQty = Field<Qty, 673>;
//-------------------------------------------------------------------------------------------------
using LegAllocAcctIDSource = Field<f8String, 674>;
//-------------------------------------------------------------------------------------------------
using LegSettlCurrency = Field<currency, 675>;
//-------------------------------------------------------------------------------------------------
using LegBenchmarkCurveCurrency = Field<currency, 676>;
//-------------------------------------------------------------------------------------------------
using LegBenchmarkCurveName = Field<f8String, 677>;
//-------------------------------------------------------------------------------------------------
using LegBenchmarkCurvePoint = Field<f8String, 678>;
//-------------------------------------------------------------------------------------------------
using LegBenchmarkPrice = Field<price, 679>;
//-------------------------------------------------------------------------------------------------
using LegBenchmarkPriceType = Field<int, 680>;
//-------------------------------------------------------------------------------------------------
using LegBidPx = Field<price, 681>;
//-------------------------------------------------------------------------------------------------
using LegIOIQty = Field<f8String, 682>;
//-------------------------------------------------------------------------------------------------
using NoLegStipulations = Field<NumInGroup, 683>;
//-------------------------------------------------------------------------------------------------
using LegOfferPx = Field<price, 684>;
//-------------------------------------------------------------------------------------------------
using LegPriceType = Field<int, 686>;
//-------------------------------------------------------------------------------------------------
using LegQty = Field<Qty, 687>;
//-------------------------------------------------------------------------------------------------
using LegStipulationType = Field<f8String, 688>;
//-------------------------------------------------------------------------------------------------
using LegStipulationValue = Field<f8String, 689>;
//-------------------------------------------------------------------------------------------------
using LegSwapType = Field<int, 690>;
const int LegSwapType_PAR_FOR_PAR(1);
const int LegSwapType_MODIFIED_DURATION(2);
const int LegSwapType_RISK(4);
const int LegSwapType_PROCEEDS(5);
const size_t LegSwapType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using Pool = Field<f8String, 691>;
//-------------------------------------------------------------------------------------------------
using QuotePriceType = Field<int, 692>;
const int QuotePriceType_PERCENT(1);
const int QuotePriceType_PER_SHARE(2);
const int QuotePriceType_FIXED_AMOUNT(3);
const int QuotePriceType_DISCOUNT_PERCENTAGE_POINTS_BELOW_PAR(4);
const int QuotePriceType_PREMIUM_PERCENTAGE_POINTS_OVER_PAR(5);
const int QuotePriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK(6);
const int QuotePriceType_TED_PRICE(7);
const int QuotePriceType_TED_YIELD(8);
const int QuotePriceType_YIELD_SPREAD(9);
const int QuotePriceType_YIELD(10);
const size_t QuotePriceType_realm_els(10);
//-------------------------------------------------------------------------------------------------
using QuoteRespID = Field<f8String, 693>;
//-------------------------------------------------------------------------------------------------
using QuoteRespType = Field<int, 694>;
const int QuoteRespType_HIT_LIFT(1);
const int QuoteRespType_COUNTER(2);
const int QuoteRespType_EXPIRED(3);
const int QuoteRespType_COVER(4);
const int QuoteRespType_DONE_AWAY(5);
const int QuoteRespType_PASS(6);
const size_t QuoteRespType_realm_els(6);
//-------------------------------------------------------------------------------------------------
using QuoteQualifier = Field<char, 695>;
//-------------------------------------------------------------------------------------------------
using YieldRedemptionDate = Field<LocalMktDate, 696>;
//-------------------------------------------------------------------------------------------------
using YieldRedemptionPrice = Field<price, 697>;
//-------------------------------------------------------------------------------------------------
using YieldRedemptionPriceType = Field<int, 698>;
//-------------------------------------------------------------------------------------------------
using BenchmarkSecurityID = Field<f8String, 699>;
//-------------------------------------------------------------------------------------------------
using ReversalIndicator = Field<Boolean, 700>;
//-------------------------------------------------------------------------------------------------
using YieldCalcDate = Field<LocalMktDate, 701>;
//-------------------------------------------------------------------------------------------------
using NoPositions = Field<NumInGroup, 702>;
//-------------------------------------------------------------------------------------------------
using PosType = Field<f8String, 703>;
const f8String PosType_ALLOCATION_TRADE_QTY("ALC");
const f8String PosType_OPTION_ASSIGNMENT("AS");
const f8String PosType_AS_OF_TRADE_QTY("ASF");
const f8String PosType_DELIVERY_QTY("DLV");
const f8String PosType_ELECTRONIC_TRADE_QTY("ETR");
const f8String PosType_OPTION_EXERCISE_QTY("EX");
const f8String PosType_END_OF_DAY_QTY("FIN");
const f8String PosType_INTRA_SPREAD_QTY("IAS");
const f8String PosType_INTER_SPREAD_QTY("IES");
const f8String PosType_ADJUSTMENT_QTY("PA");
const f8String PosType_PIT_TRADE_QTY("PIT");
const f8String PosType_START_OF_DAY_QTY("SOD");
const f8String PosType_INTEGRAL_SPLIT("SPL");
const f8String PosType_TRANSACTION_FROM_ASSIGNMENT("TA");
const f8String PosType_TOTAL_TRANSACTION_QTY("TOT");
const f8String PosType_TRANSACTION_QUANTITY("TQ");
const f8String PosType_TRANSFER_TRADE_QTY("TRF");
const f8String PosType_TRANSACTION_FROM_EXERCISE("TX");
const f8String PosType_CROSS_MARGIN_QTY("XM");
const size_t PosType_realm_els(19);
//-------------------------------------------------------------------------------------------------
using LongQty = Field<Qty, 704>;
//-------------------------------------------------------------------------------------------------
using ShortQty = Field<Qty, 705>;
//-------------------------------------------------------------------------------------------------
using PosQtyStatus = Field<int, 706>;
const int PosQtyStatus_SUBMITTED(0);
const int PosQtyStatus_ACCEPTED(1);
const int PosQtyStatus_REJECTED(2);
const size_t PosQtyStatus_realm_els(3);
//-------------------------------------------------------------------------------------------------
using PosAmtType = Field<f8String, 707>;
const f8String PosAmtType_CASH_AMOUNT("CASH");
const f8String PosAmtType_CASH_RESIDUAL_AMOUNT("CRES");
const f8String PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT("FMTM");
const f8String PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT("IMTM");
const f8String PosAmtType_PREMIUM_AMOUNT("PREM");
const f8String PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT("SMTM");
const f8String PosAmtType_TRADE_VARIATION_AMOUNT("TVAR");
const f8String PosAmtType_VALUE_ADJUSTED_AMOUNT("VADJ");
const size_t PosAmtType_realm_els(8);
//-------------------------------------------------------------------------------------------------
using PosAmt = Field<Amt, 708>;
//-------------------------------------------------------------------------------------------------
using PosTransType = Field<int, 709>;
const int PosTransType_EXERCISE(1);
const int PosTransType_DO_NOT_EXERCISE(2);
const int PosTransType_POSITION_ADJUSTMENT(3);
const int PosTransType_POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION(4);
const int PosTransType_PLEDGE(5);
const size_t PosTransType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using PosReqID = Field<f8String, 710>;
//-------------------------------------------------------------------------------------------------
using NoUnderlyings = Field<NumInGroup, 711>;
//-------------------------------------------------------------------------------------------------
using PosMaintAction = Field<int, 712>;
const int PosMaintAction_NEW_USED_TO_INCREMENT_THE_OVERALL_TRANSACTION_QUANTITY(1);
const int PosMaintAction_REPLACE_USED_TO_OVERRIDE_THE_OVERALL_TRANSACTION_QUANTITY_OR_SPECIFIC_ADD_MESSAGES_BASED_ON_THE_REFERENCE_ID(2);
const int PosMaintAction_CANCEL_USED_TO_REMOVE_THE_OVERALL_TRANSACTION_OR_SPECIFIC_ADD_MESSAGES_BASED_ON_REFERENCE_ID(3);
const size_t PosMaintAction_realm_els(3);
//-------------------------------------------------------------------------------------------------
using OrigPosReqRefID = Field<f8String, 713>;
//-------------------------------------------------------------------------------------------------
using PosMaintRptRefID = Field<f8String, 714>;
//-------------------------------------------------------------------------------------------------
using ClearingBusinessDate = Field<LocalMktDate, 715>;
//-------------------------------------------------------------------------------------------------
using SettlSessID = Field<f8String, 716>;
const f8String SettlSessID_ELECTRONIC_TRADING_HOURS("ETH");
const f8String SettlSessID_INTRADAY("ITD");
const f8String SettlSessID_REGULAR_TRADING_HOURS("RTH");
const size_t SettlSessID_realm_els(3);
//-------------------------------------------------------------------------------------------------
using SettlSessSubID = Field<f8String, 717>;
//-------------------------------------------------------------------------------------------------
using AdjustmentType = Field<int, 718>;
const int AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION(0);
const int AdjustmentType_DELTA_PLUS(1);
const int AdjustmentType_DELTA_MINUS(2);
const int AdjustmentType_FINAL(3);
const size_t AdjustmentType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using ContraryInstructionIndicator = Field<Boolean, 719>;
//-------------------------------------------------------------------------------------------------
using PriorSpreadIndicator = Field<Boolean, 720>;
//-------------------------------------------------------------------------------------------------
using PosMaintRptID = Field<f8String, 721>;
//-------------------------------------------------------------------------------------------------
using PosMaintStatus = Field<int, 722>;
const int PosMaintStatus_ACCEPTED(0);
const int PosMaintStatus_ACCEPTED_WITH_WARNINGS(1);
const int PosMaintStatus_REJECTED(2);
const int PosMaintStatus_COMPLETED(3);
const int PosMaintStatus_COMPLETED_WITH_WARNINGS(4);
const size_t PosMaintStatus_realm_els(5);
//-------------------------------------------------------------------------------------------------
using PosMaintResult = Field<int, 723>;
const int PosMaintResult_SUCCESSFUL_COMPLETION(0);
const int PosMaintResult_REJECTED(1);
const int PosMaintResult_OTHER(99);
const size_t PosMaintResult_realm_els(3);
//-------------------------------------------------------------------------------------------------
using PosReqType = Field<int, 724>;
const int PosReqType_POSITIONS(0);
const int PosReqType_TRADES(1);
const int PosReqType_EXERCISES(2);
const int PosReqType_ASSIGNMENTS(3);
const size_t PosReqType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using ResponseTransportType = Field<int, 725>;
const int ResponseTransportType_INBAND_TRANSPORT_THE_REQUEST_WAS_SENT_OVER(0);
const int ResponseTransportType_OUT_OF_BAND_PRE_ARRANGED_OUT_OF_BAND_DELIVERY_MECHANISM(1);
const size_t ResponseTransportType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ResponseDestination = Field<f8String, 726>;
//-------------------------------------------------------------------------------------------------
using TotalNumPosReports = Field<int, 727>;
//-------------------------------------------------------------------------------------------------
using PosReqResult = Field<int, 728>;
const int PosReqResult_VALID_REQUEST(0);
const int PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST(1);
const int PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA(2);
const int PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS(3);
const int PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED(4);
const int PosReqResult_OTHER(99);
const size_t PosReqResult_realm_els(6);
//-------------------------------------------------------------------------------------------------
using PosReqStatus = Field<int, 729>;
const int PosReqStatus_COMPLETED(0);
const int PosReqStatus_COMPLETED_WITH_WARNINGS(1);
const int PosReqStatus_REJECTED(2);
const size_t PosReqStatus_realm_els(3);
//-------------------------------------------------------------------------------------------------
using SettlPrice = Field<price, 730>;
//-------------------------------------------------------------------------------------------------
using SettlPriceType = Field<int, 731>;
const int SettlPriceType_FINAL(1);
const int SettlPriceType_THEORETICAL(2);
const size_t SettlPriceType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using UnderlyingSettlPrice = Field<price, 732>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSettlPriceType = Field<int, 733>;
//-------------------------------------------------------------------------------------------------
using PriorSettlPrice = Field<price, 734>;
//-------------------------------------------------------------------------------------------------
using NoQuoteQualifiers = Field<NumInGroup, 735>;
//-------------------------------------------------------------------------------------------------
using AllocSettlCurrency = Field<currency, 736>;
//-------------------------------------------------------------------------------------------------
using AllocSettlCurrAmt = Field<Amt, 737>;
//-------------------------------------------------------------------------------------------------
using InterestAtMaturity = Field<Amt, 738>;
//-------------------------------------------------------------------------------------------------
using LegDatedDate = Field<LocalMktDate, 739>;
//-------------------------------------------------------------------------------------------------
using LegPool = Field<f8String, 740>;
//-------------------------------------------------------------------------------------------------
using AllocInterestAtMaturity = Field<Amt, 741>;
//-------------------------------------------------------------------------------------------------
using AllocAccruedInterestAmt = Field<Amt, 742>;
//-------------------------------------------------------------------------------------------------
using DeliveryDate = Field<LocalMktDate, 743>;
//-------------------------------------------------------------------------------------------------
using AssignmentMethod = Field<char, 744>;
const char AssignmentMethod_PRORATA('P');
const char AssignmentMethod_RANDOM('R');
const size_t AssignmentMethod_realm_els(2);
//-------------------------------------------------------------------------------------------------
using AssignmentUnit = Field<Qty, 745>;
//-------------------------------------------------------------------------------------------------
using OpenInterest = Field<Amt, 746>;
//-------------------------------------------------------------------------------------------------
using ExerciseMethod = Field<char, 747>;
const char ExerciseMethod_AUTOMATIC('A');
const char ExerciseMethod_MANUAL('M');
const size_t ExerciseMethod_realm_els(2);
//-------------------------------------------------------------------------------------------------
using TotNumTradeReports = Field<int, 748>;
//-------------------------------------------------------------------------------------------------
using TradeRequestResult = Field<int, 749>;
const int TradeRequestResult_SUCCESSFUL(0);
const int TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT(1);
const int TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED(2);
const int TradeRequestResult_INVALID_PARTIES(3);
const int TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED(4);
const int TradeRequestResult_INVALID_DESTINATION_REQUESTED(5);
const int TradeRequestResult_TRADEREQUESTTYPE_NOT_SUPPORTED(8);
const int TradeRequestResult_UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST(9);
const int TradeRequestResult_OTHER(99);
const size_t TradeRequestResult_realm_els(9);
//-------------------------------------------------------------------------------------------------
using TradeRequestStatus = Field<int, 750>;
const int TradeRequestStatus_ACCEPTED(0);
const int TradeRequestStatus_COMPLETED(1);
const int TradeRequestStatus_REJECTED(2);
const size_t TradeRequestStatus_realm_els(3);
//-------------------------------------------------------------------------------------------------
using TradeReportRejectReason = Field<int, 751>;
const int TradeReportRejectReason_SUCCESSFUL(0);
const int TradeReportRejectReason_INVALID_PARTY_INFORMATION(1);
const int TradeReportRejectReason_UNKNOWN_INSTRUMENT(2);
const int TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES(3);
const int TradeReportRejectReason_INVALID_TRADE_TYPE(4);
const int TradeReportRejectReason_OTHER(99);
const size_t TradeReportRejectReason_realm_els(6);
//-------------------------------------------------------------------------------------------------
using SideMultiLegReportingType = Field<int, 752>;
const int SideMultiLegReportingType_SINGLE_SECURITY(1);
const int SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY(2);
const int SideMultiLegReportingType_MULTI_LEG_SECURITY(3);
const size_t SideMultiLegReportingType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using NoPosAmt = Field<NumInGroup, 753>;
//-------------------------------------------------------------------------------------------------
using AutoAcceptIndicator = Field<Boolean, 754>;
//-------------------------------------------------------------------------------------------------
using AllocReportID = Field<f8String, 755>;
//-------------------------------------------------------------------------------------------------
using NoNested2PartyIDs = Field<NumInGroup, 756>;
//-------------------------------------------------------------------------------------------------
using Nested2PartyID = Field<f8String, 757>;
//-------------------------------------------------------------------------------------------------
using Nested2PartyIDSource = Field<char, 758>;
//-------------------------------------------------------------------------------------------------
using Nested2PartyRole = Field<int, 759>;
//-------------------------------------------------------------------------------------------------
using Nested2PartySubID = Field<f8String, 760>;
//-------------------------------------------------------------------------------------------------
using BenchmarkSecurityIDSource = Field<f8String, 761>;
//-------------------------------------------------------------------------------------------------
using SecuritySubType = Field<f8String, 762>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecuritySubType = Field<f8String, 763>;
//-------------------------------------------------------------------------------------------------
using LegSecuritySubType = Field<f8String, 764>;
//-------------------------------------------------------------------------------------------------
using AllowableOneSidednessPct = Field<Percentage, 765>;
//-------------------------------------------------------------------------------------------------
using AllowableOneSidednessValue = Field<Amt, 766>;
//-------------------------------------------------------------------------------------------------
using AllowableOneSidednessCurr = Field<currency, 767>;
//-------------------------------------------------------------------------------------------------
using NoTrdRegTimestamps = Field<NumInGroup, 768>;
//-------------------------------------------------------------------------------------------------
using TrdRegTimestamp = Field<UTCTimestamp, 769>;
//-------------------------------------------------------------------------------------------------
using TrdRegTimestampType = Field<int, 770>;
const int TrdRegTimestampType_EXECUTION_TIME(1);
const int TrdRegTimestampType_TIME_IN(2);
const int TrdRegTimestampType_TIME_OUT(3);
const int TrdRegTimestampType_BROKER_RECEIPT(4);
const int TrdRegTimestampType_BROKER_EXECUTION(5);
const size_t TrdRegTimestampType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using TrdRegTimestampOrigin = Field<f8String, 771>;
//-------------------------------------------------------------------------------------------------
using ConfirmRefID = Field<f8String, 772>;
//-------------------------------------------------------------------------------------------------
using ConfirmType = Field<int, 773>;
const int ConfirmType_STATUS(1);
const int ConfirmType_CONFIRMATION(2);
const int ConfirmType_CONFIRMATION_REQUEST_REJECTED(3);
const size_t ConfirmType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using ConfirmRejReason = Field<int, 774>;
const int ConfirmRejReason_MISMATCHED_ACCOUNT(1);
const int ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS(2);
const int ConfirmRejReason_OTHER(99);
const size_t ConfirmRejReason_realm_els(3);
//-------------------------------------------------------------------------------------------------
using BookingType = Field<int, 775>;
const int BookingType_REGULAR_BOOKING(0);
const int BookingType_CFD(1);
const int BookingType_TOTAL_RETURN_SWAP(2);
const size_t BookingType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using IndividualAllocRejCode = Field<int, 776>;
//-------------------------------------------------------------------------------------------------
using SettlInstMsgID = Field<f8String, 777>;
//-------------------------------------------------------------------------------------------------
using NoSettlInst = Field<NumInGroup, 778>;
//-------------------------------------------------------------------------------------------------
using LastUpdateTime = Field<UTCTimestamp, 779>;
//-------------------------------------------------------------------------------------------------
using AllocSettlInstType = Field<int, 780>;
const int AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS(0);
const int AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED(1);
const int AllocSettlInstType_FULL_DETAILS_PROVIDED(2);
const int AllocSettlInstType_SSI_DB_IDS_PROVIDED(3);
const int AllocSettlInstType_PHONE_FOR_INSTRUCTIONS(4);
const size_t AllocSettlInstType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using NoSettlPartyIDs = Field<NumInGroup, 781>;
//-------------------------------------------------------------------------------------------------
using SettlPartyID = Field<f8String, 782>;
//-------------------------------------------------------------------------------------------------
using SettlPartyIDSource = Field<char, 783>;
//-------------------------------------------------------------------------------------------------
using SettlPartyRole = Field<int, 784>;
//-------------------------------------------------------------------------------------------------
using SettlPartySubID = Field<f8String, 785>;
//-------------------------------------------------------------------------------------------------
using SettlPartySubIDType = Field<int, 786>;
//-------------------------------------------------------------------------------------------------
using DlvyInstType = Field<char, 787>;
const char DlvyInstType_CASH('C');
const char DlvyInstType_SECURITIES('S');
const size_t DlvyInstType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using TerminationType = Field<int, 788>;
const int TerminationType_OVERNIGHT(1);
const int TerminationType_TERM(2);
const int TerminationType_FLEXIBLE(3);
const int TerminationType_OPEN(4);
const size_t TerminationType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using NextExpectedMsgSeqNum = Field<SeqNum, 789>;
//-------------------------------------------------------------------------------------------------
using OrdStatusReqID = Field<f8String, 790>;
//-------------------------------------------------------------------------------------------------
using SettlInstReqID = Field<f8String, 791>;
//-------------------------------------------------------------------------------------------------
using SettlInstReqRejCode = Field<int, 792>;
const int SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST(0);
const int SettlInstReqRejCode_UNKNOWN_ACCOUNT(1);
const int SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND(2);
const int SettlInstReqRejCode_OTHER(99);
const size_t SettlInstReqRejCode_realm_els(4);
//-------------------------------------------------------------------------------------------------
using SecondaryAllocID = Field<f8String, 793>;
//-------------------------------------------------------------------------------------------------
using AllocReportType = Field<int, 794>;
const int AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY(3);
const int AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY(4);
const int AllocReportType_WAREHOUSE_RECAP(5);
const int AllocReportType_REQUEST_TO_INTERMEDIARY(8);
const size_t AllocReportType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using AllocReportRefID = Field<f8String, 795>;
//-------------------------------------------------------------------------------------------------
using AllocCancReplaceReason = Field<int, 796>;
const int AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE_INCORRECT(1);
const int AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS(2);
const int AllocCancReplaceReason_OTHER(99);
const size_t AllocCancReplaceReason_realm_els(3);
//-------------------------------------------------------------------------------------------------
using CopyMsgIndicator = Field<Boolean, 797>;
//-------------------------------------------------------------------------------------------------
using AllocAccountType = Field<int, 798>;
const int AllocAccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS(1);
const int AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS(2);
const int AllocAccountType_HOUSE_TRADER(3);
const int AllocAccountType_FLOOR_TRADER(4);
const int AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED(6);
const int AllocAccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED(7);
const int AllocAccountType_JOINT_BACKOFFICE_ACCOUNT(8);
const size_t AllocAccountType_realm_els(7);
//-------------------------------------------------------------------------------------------------
using OrderAvgPx = Field<price, 799>;
//-------------------------------------------------------------------------------------------------
using OrderBookingQty = Field<Qty, 800>;
//-------------------------------------------------------------------------------------------------
using NoSettlPartySubIDs = Field<NumInGroup, 801>;
//-------------------------------------------------------------------------------------------------
using NoPartySubIDs = Field<NumInGroup, 802>;
//-------------------------------------------------------------------------------------------------
using PartySubIDType = Field<int, 803>;
const int PartySubIDType_FIRM(1);
const int PartySubIDType_PERSON(2);
const int PartySubIDType_SYSTEM(3);
const int PartySubIDType_APPLICATION(4);
const int PartySubIDType_FULL_LEGAL_NAME_OF_FIRM(5);
const int PartySubIDType_POSTAL_ADDRESS(6);
const int PartySubIDType_PHONE_NUMBER(7);
const int PartySubIDType_EMAIL_ADDRESS(8);
const int PartySubIDType_CONTACT_NAME(9);
const int PartySubIDType_SECURITIES_ACCOUNT_NUMBER(10);
const int PartySubIDType_REGISTRATION_NUMBER(11);
const int PartySubIDType_REGISTERED_ADDRESS_12(12);
const int PartySubIDType_REGULATORY_STATUS(13);
const int PartySubIDType_REGISTRATION_NAME(14);
const int PartySubIDType_CASH_ACCOUNT_NUMBER(15);
const int PartySubIDType_BIC(16);
const int PartySubIDType_CSD_PARTICIPANT_MEMBER_CODE(17);
const int PartySubIDType_REGISTERED_ADDRESS_18(18);
const int PartySubIDType_FUND_ACCOUNT_NAME(19);
const int PartySubIDType_TELEX_NUMBER(20);
const int PartySubIDType_FAX_NUMBER(21);
const int PartySubIDType_SECURITIES_ACCOUNT_NAME(22);
const int PartySubIDType_CASH_ACCOUNT_NAME(23);
const int PartySubIDType_DEPARTMENT(24);
const int PartySubIDType_LOCATION(25);
const int PartySubIDType_POSITION_ACCOUNT_TYPE(26);
const size_t PartySubIDType_realm_els(26);
//-------------------------------------------------------------------------------------------------
using NoNestedPartySubIDs = Field<NumInGroup, 804>;
//-------------------------------------------------------------------------------------------------
using NestedPartySubIDType = Field<int, 805>;
//-------------------------------------------------------------------------------------------------
using NoNested2PartySubIDs = Field<NumInGroup, 806>;
//-------------------------------------------------------------------------------------------------
using Nested2PartySubIDType = Field<int, 807>;
//-------------------------------------------------------------------------------------------------
using AllocIntermedReqType = Field<int, 808>;
const int AllocIntermedReqType_PENDING_ACCEPT(1);
const int AllocIntermedReqType_PENDING_RELEASE(2);
const int AllocIntermedReqType_PENDING_REVERSAL(3);
const int AllocIntermedReqType_ACCEPT(4);
const int AllocIntermedReqType_BLOCK_LEVEL_REJECT(5);
const int AllocIntermedReqType_ACCOUNT_LEVEL_REJECT(6);
const size_t AllocIntermedReqType_realm_els(6);
//-------------------------------------------------------------------------------------------------
using UnderlyingPx = Field<price, 810>;
//-------------------------------------------------------------------------------------------------
using PriceDelta = Field<fp_type, 811>;
//-------------------------------------------------------------------------------------------------
using ApplQueueMax = Field<int, 812>;
//-------------------------------------------------------------------------------------------------
using ApplQueueDepth = Field<int, 813>;
//-------------------------------------------------------------------------------------------------
using ApplQueueResolution = Field<int, 814>;
const int ApplQueueResolution_NO_ACTION_TAKEN(0);
const int ApplQueueResolution_QUEUE_FLUSHED(1);
const int ApplQueueResolution_OVERLAY_LAST(2);
const int ApplQueueResolution_END_SESSION(3);
const size_t ApplQueueResolution_realm_els(4);
//-------------------------------------------------------------------------------------------------
using ApplQueueAction = Field<int, 815>;
const int ApplQueueAction_NO_ACTION_TAKEN(0);
const int ApplQueueAction_QUEUE_FLUSHED(1);
const int ApplQueueAction_OVERLAY_LAST(2);
const int ApplQueueAction_END_SESSION(3);
const size_t ApplQueueAction_realm_els(4);
//-------------------------------------------------------------------------------------------------
using NoAltMDSource = Field<NumInGroup, 816>;
//-------------------------------------------------------------------------------------------------
using AltMDSourceID = Field<f8String, 817>;
//-------------------------------------------------------------------------------------------------
using SecondaryTradeReportID = Field<f8String, 818>;
//-------------------------------------------------------------------------------------------------
using AvgPxIndicator = Field<int, 819>;
const int AvgPxIndicator_NO_AVERAGE_PRICING(0);
const int AvgPxIndicator_TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID(1);
const int AvgPxIndicator_LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID(2);
const size_t AvgPxIndicator_realm_els(3);
//-------------------------------------------------------------------------------------------------
using TradeLinkID = Field<f8String, 820>;
//-------------------------------------------------------------------------------------------------
using OrderInputDevice = Field<f8String, 821>;
//-------------------------------------------------------------------------------------------------
using UnderlyingTradingSessionID = Field<f8String, 822>;
//-------------------------------------------------------------------------------------------------
using UnderlyingTradingSessionSubID = Field<f8String, 823>;
//-------------------------------------------------------------------------------------------------
using TradeLegRefID = Field<f8String, 824>;
//-------------------------------------------------------------------------------------------------
using ExchangeRule = Field<f8String, 825>;
//-------------------------------------------------------------------------------------------------
using TradeAllocIndicator = Field<int, 826>;
const int TradeAllocIndicator_ALLOCATION_NOT_REQUIRED(0);
const int TradeAllocIndicator_ALLOCATION_REQUIRED(1);
const int TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE(2);
const size_t TradeAllocIndicator_realm_els(3);
//-------------------------------------------------------------------------------------------------
using ExpirationCycle = Field<int, 827>;
const int ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE(0);
const int ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN(1);
const size_t ExpirationCycle_realm_els(2);
//-------------------------------------------------------------------------------------------------
using TrdType = Field<int, 828>;
const int TrdType_REGULAR_TRADE(0);
const int TrdType_BLOCK_TRADE(1);
const int TrdType_EFP(2);
const int TrdType_TRANSFER(3);
const int TrdType_LATE_TRADE(4);
const int TrdType_T_TRADE(5);
const int TrdType_WEIGHTED_AVERAGE_PRICE_TRADE(6);
const int TrdType_BUNCHED_TRADE(7);
const int TrdType_LATE_BUNCHED_TRADE(8);
const int TrdType_PRIOR_REFERENCE_PRICE_TRADE(9);
const int TrdType_AFTER_HOURS_TRADE(10);
const size_t TrdType_realm_els(11);
//-------------------------------------------------------------------------------------------------
using TrdSubType = Field<int, 829>;
//-------------------------------------------------------------------------------------------------
using TransferReason = Field<f8String, 830>;
//-------------------------------------------------------------------------------------------------
using TotNumAssignmentReports = Field<int, 832>;
//-------------------------------------------------------------------------------------------------
using AsgnRptID = Field<f8String, 833>;
//-------------------------------------------------------------------------------------------------
using ThresholdAmount = Field<PriceOffset, 834>;
//-------------------------------------------------------------------------------------------------
using PegMoveType = Field<int, 835>;
const int PegMoveType_FLOATING(0);
const int PegMoveType_FIXED(1);
const size_t PegMoveType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using PegOffsetType = Field<int, 836>;
const int PegOffsetType_PRICE(0);
const int PegOffsetType_BASIS_POINTS(1);
const int PegOffsetType_TICKS(2);
const int PegOffsetType_PRICE_TIER(3);
const size_t PegOffsetType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using PegLimitType = Field<int, 837>;
const int PegLimitType_OR_BETTER(0);
const int PegLimitType_STRICT_LIMIT_IS_A_STRICT_LIMIT(1);
const int PegLimitType_OR_WORSE_FOR_A_BUY_THE_PEG_LIMIT_IS_A_MINIMUM_AND_FOR_A_SELL_THE_PEG_LIMIT_IS_A_MAXIMUM(2);
const size_t PegLimitType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using PegRoundDirection = Field<int, 838>;
const int PegRoundDirection_MORE_AGGRESSIVE_ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_ROUND_UP_TO_THE_NEAREST_TICK_ON_A_SELL_ROUND_DOWN_TO_THE_NEAREST_TICK(1);
const int PegRoundDirection_MORE_PASSIVE_ON_A_BUY_ORDER_ROUND_DOWN_TO_NEAREST_TICK_ON_A_SELL_ORDER_ROUND_UP_TO_NEAREST_TICK(2);
const size_t PegRoundDirection_realm_els(2);
//-------------------------------------------------------------------------------------------------
using PeggedPrice = Field<price, 839>;
//-------------------------------------------------------------------------------------------------
using PegScope = Field<int, 840>;
const int PegScope_LOCAL(1);
const int PegScope_NATIONAL(2);
const int PegScope_GLOBAL(3);
const int PegScope_NATIONAL_EXCLUDING_LOCAL(4);
const size_t PegScope_realm_els(4);
//-------------------------------------------------------------------------------------------------
using DiscretionMoveType = Field<int, 841>;
const int DiscretionMoveType_FLOATING(0);
const int DiscretionMoveType_FIXED(1);
const size_t DiscretionMoveType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using DiscretionOffsetType = Field<int, 842>;
const int DiscretionOffsetType_PRICE(0);
const int DiscretionOffsetType_BASIS_POINTS(1);
const int DiscretionOffsetType_TICKS(2);
const int DiscretionOffsetType_PRICE_TIER(3);
const size_t DiscretionOffsetType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using DiscretionLimitType = Field<int, 843>;
const int DiscretionLimitType_OR_BETTER(0);
const int DiscretionLimitType_STRICT_LIMIT_IS_A_STRICT_LIMIT(1);
const int DiscretionLimitType_OR_WORSE_FOR_A_BUY_THE_DISCRETION_PRICE_IS_A_MINIMUM_AND_FOR_A_SELL_THE_DISCRETION_PRICE_IS_A_MAXIMUM(2);
const size_t DiscretionLimitType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using DiscretionRoundDirection = Field<int, 844>;
const int DiscretionRoundDirection_MORE_AGGRESSIVE_ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_ROUND_UP_TO_THE_NEAREST_TICK_ON_A_SELL_ROUND_DOWN_TO_THE_NEAREST_TICK(1);
const int DiscretionRoundDirection_MORE_PASSIVE_ON_A_BUY_ORDER_ROUND_DOWN_TO_NEAREST_TICK_ON_A_SELL_ORDER_ROUND_UP_TO_NEAREST_TICK(2);
const size_t DiscretionRoundDirection_realm_els(2);
//-------------------------------------------------------------------------------------------------
using DiscretionPrice = Field<price, 845>;
//-------------------------------------------------------------------------------------------------
using DiscretionScope = Field<int, 846>;
const int DiscretionScope_LOCAL(1);
const int DiscretionScope_NATIONAL(2);
const int DiscretionScope_GLOBAL(3);
const int DiscretionScope_NATIONAL_EXCLUDING_LOCAL(4);
const size_t DiscretionScope_realm_els(4);
//-------------------------------------------------------------------------------------------------
using TargetStrategy = Field<int, 847>;
const int TargetStrategy_VWAP(1);
const int TargetStrategy_PARTICIPATE(2);
const int TargetStrategy_MININIZE_MARKET_IMPACT(3);
const size_t TargetStrategy_realm_els(3);
//-------------------------------------------------------------------------------------------------
using TargetStrategyParameters = Field<f8String, 848>;
//-------------------------------------------------------------------------------------------------
using ParticipationRate = Field<Percentage, 849>;
//-------------------------------------------------------------------------------------------------
using TargetStrategyPerformance = Field<fp_type, 850>;
//-------------------------------------------------------------------------------------------------
using LastLiquidityInd = Field<int, 851>;
const int LastLiquidityInd_ADDED_LIQUIDITY(1);
const int LastLiquidityInd_REMOVED_LIQUIDITY(2);
const int LastLiquidityInd_LIQUIDITY_ROUTED_OUT(3);
const size_t LastLiquidityInd_realm_els(3);
//-------------------------------------------------------------------------------------------------
using PublishTrdIndicator = Field<Boolean, 852>;
const char PublishTrdIndicator_NO('N');
const char PublishTrdIndicator_YES('Y');
const size_t PublishTrdIndicator_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ShortSaleReason = Field<int, 853>;
const int ShortSaleReason_DEALER_SOLD_SHORT(0);
const int ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT(1);
const int ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT(2);
const int ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT(3);
const int ShortSaleReason_QUALIFED_SERVICE_REPRESENTATIVE(4);
const int ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT(5);
const size_t ShortSaleReason_realm_els(6);
//-------------------------------------------------------------------------------------------------
using QtyType = Field<int, 854>;
const int QtyType_UNITS(0);
const int QtyType_CONTRACTS(1);
const size_t QtyType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using SecondaryTrdType = Field<int, 855>;
//-------------------------------------------------------------------------------------------------
using TradeReportType = Field<int, 856>;
const int TradeReportType_SUBMIT(0);
const int TradeReportType_ALLEGED(1);
const int TradeReportType_ACCEPT(2);
const int TradeReportType_DECLINE(3);
const int TradeReportType_ADDENDUM(4);
const int TradeReportType_NO_WAS(5);
const int TradeReportType_TRADE_REPORT_CANCEL(6);
const int TradeReportType_LOCKED_IN_TRADE_BREAK(7);
const size_t TradeReportType_realm_els(8);
//-------------------------------------------------------------------------------------------------
using AllocNoOrdersType = Field<int, 857>;
const int AllocNoOrdersType_NOT_SPECIFIED(0);
const int AllocNoOrdersType_EXPLICIT_LIST_PROVIDED(1);
const size_t AllocNoOrdersType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using SharedCommission = Field<Amt, 858>;
//-------------------------------------------------------------------------------------------------
using ConfirmReqID = Field<f8String, 859>;
//-------------------------------------------------------------------------------------------------
using AvgParPx = Field<price, 860>;
//-------------------------------------------------------------------------------------------------
using ReportedPx = Field<price, 861>;
//-------------------------------------------------------------------------------------------------
using NoCapacities = Field<NumInGroup, 862>;
//-------------------------------------------------------------------------------------------------
using OrderCapacityQty = Field<Qty, 863>;
//-------------------------------------------------------------------------------------------------
using NoEvents = Field<NumInGroup, 864>;
//-------------------------------------------------------------------------------------------------
using EventType = Field<int, 865>;
const int EventType_PUT(1);
const int EventType_CALL(2);
const int EventType_TENDER(3);
const int EventType_SINKING_FUND_CALL(4);
const int EventType_OTHER(99);
const size_t EventType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using EventDate = Field<LocalMktDate, 866>;
//-------------------------------------------------------------------------------------------------
using EventPx = Field<price, 867>;
//-------------------------------------------------------------------------------------------------
using EventText = Field<f8String, 868>;
//-------------------------------------------------------------------------------------------------
using PctAtRisk = Field<Percentage, 869>;
//-------------------------------------------------------------------------------------------------
using NoInstrAttrib = Field<NumInGroup, 870>;
//-------------------------------------------------------------------------------------------------
using InstrAttribType = Field<int, 871>;
const int InstrAttribType_FLAT(1);
const int InstrAttribType_ZERO_COUPON(2);
const int InstrAttribType_INTEREST_BEARING(3);
const int InstrAttribType_NO_PERIODIC_PAYMENTS(4);
const int InstrAttribType_VARIABLE_RATE(5);
const int InstrAttribType_LESS_FEE_FOR_PUT(6);
const int InstrAttribType_STEPPED_COUPON(7);
const int InstrAttribType_COUPON_PERIOD(8);
const int InstrAttribType_WHEN_AND_IF_ISSUED(9);
const int InstrAttribType_ORIGINAL_ISSUE_DISCOUNT(10);
const int InstrAttribType_CALLABLE_PUTTABLE(11);
const int InstrAttribType_ESCROWED_TO_MATURITY(12);
const int InstrAttribType_ESCROWED_TO_REDEMPTION_DATE_CALLABLE_SUPPLY_REDEMPTION_DATE_IN_THE_INSTRATTRIBVALUE(13);
const int InstrAttribType_PREREFUNDED(14);
const int InstrAttribType_IN_DEFAULT(15);
const int InstrAttribType_UNRATED(16);
const int InstrAttribType_TAXABLE(17);
const int InstrAttribType_INDEXED(18);
const int InstrAttribType_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX(19);
const int InstrAttribType_ORIGINAL_ISSUE_DISCOUNT_PRICE_SUPPLY_PRICE_IN_THE_INSTRATTRIBVALUE(20);
const int InstrAttribType_CALLABLE_BELOW_MATURITY_VALUE(21);
const int InstrAttribType_CALLABLE_WITHOUT_NOTICE_BY_MAIL_TO_HOLDER_UNLESS_REGISTERED(22);
const int InstrAttribType_TEXT_SUPPLY_THE_TEXT_OF_THE_ATTRIBUTE_OR_DISCLAIMER_IN_THE_INSTRATTRIBVALUE(99);
const size_t InstrAttribType_realm_els(23);
//-------------------------------------------------------------------------------------------------
using InstrAttribValue = Field<f8String, 872>;
//-------------------------------------------------------------------------------------------------
using DatedDate = Field<LocalMktDate, 873>;
//-------------------------------------------------------------------------------------------------
using InterestAccrualDate = Field<LocalMktDate, 874>;
//-------------------------------------------------------------------------------------------------
using CPProgram = Field<int, 875>;
const int CPProgram_3(1);
const int CPProgram_4(2);
const int CPProgram_OTHER(99);
const size_t CPProgram_realm_els(3);
//-------------------------------------------------------------------------------------------------
using CPRegType = Field<f8String, 876>;
//-------------------------------------------------------------------------------------------------
using UnderlyingCPProgram = Field<f8String, 877>;
//-------------------------------------------------------------------------------------------------
using UnderlyingCPRegType = Field<f8String, 878>;
//-------------------------------------------------------------------------------------------------
using UnderlyingQty = Field<Qty, 879>;
//-------------------------------------------------------------------------------------------------
using TrdMatchID = Field<f8String, 880>;
//-------------------------------------------------------------------------------------------------
using SecondaryTradeReportRefID = Field<f8String, 881>;
//-------------------------------------------------------------------------------------------------
using UnderlyingDirtyPrice = Field<price, 882>;
//-------------------------------------------------------------------------------------------------
using UnderlyingEndPrice = Field<price, 883>;
//-------------------------------------------------------------------------------------------------
using UnderlyingStartValue = Field<Amt, 884>;
//-------------------------------------------------------------------------------------------------
using UnderlyingCurrentValue = Field<Amt, 885>;
//-------------------------------------------------------------------------------------------------
using UnderlyingEndValue = Field<Amt, 886>;
//-------------------------------------------------------------------------------------------------
using NoUnderlyingStips = Field<NumInGroup, 887>;
//-------------------------------------------------------------------------------------------------
using UnderlyingStipType = Field<f8String, 888>;
//-------------------------------------------------------------------------------------------------
using UnderlyingStipValue = Field<f8String, 889>;
//-------------------------------------------------------------------------------------------------
using MaturityNetMoney = Field<Amt, 890>;
//-------------------------------------------------------------------------------------------------
using MiscFeeBasis = Field<int, 891>;
const int MiscFeeBasis_ABSOLUTE(0);
const int MiscFeeBasis_PER_UNIT(1);
const int MiscFeeBasis_PERCENTAGE(2);
const size_t MiscFeeBasis_realm_els(3);
//-------------------------------------------------------------------------------------------------
using TotNoAllocs = Field<int, 892>;
//-------------------------------------------------------------------------------------------------
using LastFragment = Field<Boolean, 893>;
const char LastFragment_NO('N');
const char LastFragment_YES('Y');
const size_t LastFragment_realm_els(2);
//-------------------------------------------------------------------------------------------------
using CollReqID = Field<f8String, 894>;
//-------------------------------------------------------------------------------------------------
using CollAsgnReason = Field<int, 895>;
const int CollAsgnReason_INITIAL(0);
const int CollAsgnReason_SCHEDULED(1);
const int CollAsgnReason_TIME_WARNING(2);
const int CollAsgnReason_MARGIN_DEFICIENCY(3);
const int CollAsgnReason_MARGIN_EXCESS(4);
const int CollAsgnReason_FORWARD_COLLATERAL_DEMAND(5);
const int CollAsgnReason_EVENT_OF_DEFAULT(6);
const int CollAsgnReason_ADVERSE_TAX_EVENT(7);
const size_t CollAsgnReason_realm_els(8);
//-------------------------------------------------------------------------------------------------
using CollInquiryQualifier = Field<int, 896>;
const int CollInquiryQualifier_TRADEDATE(0);
const int CollInquiryQualifier_GC_INSTRUMENT(1);
const int CollInquiryQualifier_COLLATERALINSTRUMENT(2);
const int CollInquiryQualifier_SUBSTITUTION_ELIGIBLE(3);
const int CollInquiryQualifier_NOT_ASSIGNED(4);
const int CollInquiryQualifier_PARTIALLY_ASSIGNED(5);
const int CollInquiryQualifier_FULLY_ASSIGNED(6);
const int CollInquiryQualifier_OUTSTANDING_TRADES(7);
const size_t CollInquiryQualifier_realm_els(8);
//-------------------------------------------------------------------------------------------------
using NoTrades = Field<NumInGroup, 897>;
//-------------------------------------------------------------------------------------------------
using MarginRatio = Field<Percentage, 898>;
//-------------------------------------------------------------------------------------------------
using MarginExcess = Field<Amt, 899>;
//-------------------------------------------------------------------------------------------------
using TotalNetValue = Field<Amt, 900>;
//-------------------------------------------------------------------------------------------------
using CashOutstanding = Field<Amt, 901>;
//-------------------------------------------------------------------------------------------------
using CollAsgnID = Field<f8String, 902>;
//-------------------------------------------------------------------------------------------------
using CollAsgnTransType = Field<int, 903>;
const int CollAsgnTransType_NEW(0);
const int CollAsgnTransType_REPLACE(1);
const int CollAsgnTransType_CANCEL(2);
const int CollAsgnTransType_RELEASE(3);
const int CollAsgnTransType_REVERSE(4);
const size_t CollAsgnTransType_realm_els(5);
//-------------------------------------------------------------------------------------------------
using CollRespID = Field<f8String, 904>;
//-------------------------------------------------------------------------------------------------
using CollAsgnRespType = Field<int, 905>;
const int CollAsgnRespType_RECEIVED(0);
const int CollAsgnRespType_ACCEPTED(1);
const int CollAsgnRespType_DECLINED(2);
const int CollAsgnRespType_REJECTED(3);
const size_t CollAsgnRespType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using CollAsgnRejectReason = Field<int, 906>;
const int CollAsgnRejectReason_UNKNOWN_DEAL(0);
const int CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT(1);
const int CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION(2);
const int CollAsgnRejectReason_INSUFFICIENT_COLLATERAL(3);
const int CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL(4);
const int CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION(5);
const int CollAsgnRejectReason_OTHER(99);
const size_t CollAsgnRejectReason_realm_els(7);
//-------------------------------------------------------------------------------------------------
using CollAsgnRefID = Field<f8String, 907>;
//-------------------------------------------------------------------------------------------------
using CollRptID = Field<f8String, 908>;
//-------------------------------------------------------------------------------------------------
using CollInquiryID = Field<f8String, 909>;
//-------------------------------------------------------------------------------------------------
using CollStatus = Field<int, 910>;
const int CollStatus_UNASSIGNED(0);
const int CollStatus_PARTIALLY_ASSIGNED(1);
const int CollStatus_ASSIGNMENT_PROPOSED(2);
const int CollStatus_ASSIGNED(3);
const int CollStatus_CHALLENGED(4);
const size_t CollStatus_realm_els(5);
//-------------------------------------------------------------------------------------------------
using TotNumReports = Field<int, 911>;
//-------------------------------------------------------------------------------------------------
using LastRptRequested = Field<Boolean, 912>;
//-------------------------------------------------------------------------------------------------
using AgreementDesc = Field<f8String, 913>;
//-------------------------------------------------------------------------------------------------
using AgreementID = Field<f8String, 914>;
//-------------------------------------------------------------------------------------------------
using AgreementDate = Field<LocalMktDate, 915>;
//-------------------------------------------------------------------------------------------------
using StartDate = Field<LocalMktDate, 916>;
//-------------------------------------------------------------------------------------------------
using EndDate = Field<LocalMktDate, 917>;
//-------------------------------------------------------------------------------------------------
using AgreementCurrency = Field<currency, 918>;
//-------------------------------------------------------------------------------------------------
using DeliveryType = Field<int, 919>;
const int DeliveryType_VERSUS_PAYMENT_DELIVER(0);
const int DeliveryType_FREE_DELIVER(1);
const int DeliveryType_TRI_PARTY(2);
const int DeliveryType_HOLD_IN_CUSTODY(3);
const size_t DeliveryType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using EndAccruedInterestAmt = Field<Amt, 920>;
//-------------------------------------------------------------------------------------------------
using StartCash = Field<Amt, 921>;
//-------------------------------------------------------------------------------------------------
using EndCash = Field<Amt, 922>;
//-------------------------------------------------------------------------------------------------
using UserRequestID = Field<f8String, 923>;
//-------------------------------------------------------------------------------------------------
using UserRequestType = Field<int, 924>;
const int UserRequestType_LOGONUSER(1);
const int UserRequestType_LOGOFFUSER(2);
const int UserRequestType_CHANGEPASSWORDFORUSER(3);
const int UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS(4);
const size_t UserRequestType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using NewPassword = Field<f8String, 925>;
//-------------------------------------------------------------------------------------------------
using UserStatus = Field<int, 926>;
const int UserStatus_LOGGED_IN(1);
const int UserStatus_NOT_LOGGED_IN(2);
const int UserStatus_USER_NOT_RECOGNISED(3);
const int UserStatus_PASSWORD_INCORRECT(4);
const int UserStatus_PASSWORD_CHANGED(5);
const int UserStatus_OTHER(6);
const size_t UserStatus_realm_els(6);
//-------------------------------------------------------------------------------------------------
using UserStatusText = Field<f8String, 927>;
//-------------------------------------------------------------------------------------------------
using StatusValue = Field<int, 928>;
const int StatusValue_CONNECTED(1);
const int StatusValue_NOT_CONNECTED_DOWN_EXPECTED_UP(2);
const int StatusValue_NOT_CONNECTED_DOWN_EXPECTED_DOWN(3);
const int StatusValue_IN_PROCESS(4);
const size_t StatusValue_realm_els(4);
//-------------------------------------------------------------------------------------------------
using StatusText = Field<f8String, 929>;
//-------------------------------------------------------------------------------------------------
using RefCompID = Field<f8String, 930>;
//-------------------------------------------------------------------------------------------------
using RefSubID = Field<f8String, 931>;
//-------------------------------------------------------------------------------------------------
using NetworkResponseID = Field<f8String, 932>;
//-------------------------------------------------------------------------------------------------
using NetworkRequestID = Field<f8String, 933>;
//-------------------------------------------------------------------------------------------------
using LastNetworkResponseID = Field<f8String, 934>;
//-------------------------------------------------------------------------------------------------
using NetworkRequestType = Field<int, 935>;
const int NetworkRequestType_SNAPSHOT(1);
const int NetworkRequestType_SUBSCRIBE(2);
const int NetworkRequestType_STOP_SUBSCRIBING(4);
const int NetworkRequestType_LEVEL_OF_DETAIL_THEN_NOCOMPIDS_BECOMES_REQUIRED(8);
const size_t NetworkRequestType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using NoCompIDs = Field<NumInGroup, 936>;
//-------------------------------------------------------------------------------------------------
using NetworkStatusResponseType = Field<int, 937>;
const int NetworkStatusResponseType_FULL(1);
const int NetworkStatusResponseType_INCREMENTAL_UPDATE(2);
const size_t NetworkStatusResponseType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NoCollInquiryQualifier = Field<NumInGroup, 938>;
//-------------------------------------------------------------------------------------------------
using TrdRptStatus = Field<int, 939>;
const int TrdRptStatus_ACCEPTED(0);
const int TrdRptStatus_REJECTED(1);
const size_t TrdRptStatus_realm_els(2);
//-------------------------------------------------------------------------------------------------
using AffirmStatus = Field<int, 940>;
const int AffirmStatus_RECEIVED(1);
const int AffirmStatus_CONFIRM_REJECTED_IE_NOT_AFFIRMED(2);
const int AffirmStatus_AFFIRMED(3);
const size_t AffirmStatus_realm_els(3);
//-------------------------------------------------------------------------------------------------
using UnderlyingStrikeCurrency = Field<currency, 941>;
//-------------------------------------------------------------------------------------------------
using LegStrikeCurrency = Field<currency, 942>;
//-------------------------------------------------------------------------------------------------
using TimeBracket = Field<f8String, 943>;
//-------------------------------------------------------------------------------------------------
using CollAction = Field<int, 944>;
const int CollAction_RETAIN(0);
const int CollAction_ADD(1);
const int CollAction_REMOVE(2);
const size_t CollAction_realm_els(3);
//-------------------------------------------------------------------------------------------------
using CollInquiryStatus = Field<int, 945>;
const int CollInquiryStatus_ACCEPTED(0);
const int CollInquiryStatus_ACCEPTED_WITH_WARNINGS(1);
const int CollInquiryStatus_COMPLETED(2);
const int CollInquiryStatus_COMPLETED_WITH_WARNINGS(3);
const int CollInquiryStatus_REJECTED(4);
const size_t CollInquiryStatus_realm_els(5);
//-------------------------------------------------------------------------------------------------
using CollInquiryResult = Field<int, 946>;
const int CollInquiryResult_SUCCESSFUL(0);
const int CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT(1);
const int CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE(2);
const int CollInquiryResult_INVALID_PARTIES(3);
const int CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED(4);
const int CollInquiryResult_INVALID_DESTINATION_REQUESTED(5);
const int CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED(6);
const int CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED(7);
const int CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED(8);
const int CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY(9);
const int CollInquiryResult_OTHER(99);
const size_t CollInquiryResult_realm_els(11);
//-------------------------------------------------------------------------------------------------
using StrikeCurrency = Field<currency, 947>;
//-------------------------------------------------------------------------------------------------
using NoNested3PartyIDs = Field<NumInGroup, 948>;
//-------------------------------------------------------------------------------------------------
using Nested3PartyID = Field<f8String, 949>;
//-------------------------------------------------------------------------------------------------
using Nested3PartyIDSource = Field<char, 950>;
//-------------------------------------------------------------------------------------------------
using Nested3PartyRole = Field<int, 951>;
//-------------------------------------------------------------------------------------------------
using NoNested3PartySubIDs = Field<NumInGroup, 952>;
//-------------------------------------------------------------------------------------------------
using Nested3PartySubID = Field<f8String, 953>;
//-------------------------------------------------------------------------------------------------
using Nested3PartySubIDType = Field<int, 954>;
//-------------------------------------------------------------------------------------------------
using LegContractSettlMonth = Field<MonthYear, 955>;
//-------------------------------------------------------------------------------------------------
using LegInterestAccrualDate = Field<LocalMktDate, 956>;
//-------------------------------------------------------------------------------------------------
using FIX8_SERUM_Order_BaseEntry = FieldTable;

} // namespace SERUM_Order
} // namespace FIX8
#endif // FIX8_464958385F534552554D5F4F726465725F74797065732E687070_
